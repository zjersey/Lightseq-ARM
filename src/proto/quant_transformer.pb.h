// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quant_transformer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_quant_5ftransformer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_quant_5ftransformer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_quant_5ftransformer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_quant_5ftransformer_2eproto {
  static const uint32_t offsets[];
};
class QuantDecoderLayer;
struct QuantDecoderLayerDefaultTypeInternal;
extern QuantDecoderLayerDefaultTypeInternal _QuantDecoderLayer_default_instance_;
class QuantEmbeddingLayer;
struct QuantEmbeddingLayerDefaultTypeInternal;
extern QuantEmbeddingLayerDefaultTypeInternal _QuantEmbeddingLayer_default_instance_;
class QuantEncoderLayer;
struct QuantEncoderLayerDefaultTypeInternal;
extern QuantEncoderLayerDefaultTypeInternal _QuantEncoderLayer_default_instance_;
class QuantModelConf;
struct QuantModelConfDefaultTypeInternal;
extern QuantModelConfDefaultTypeInternal _QuantModelConf_default_instance_;
class QuantTransformer;
struct QuantTransformerDefaultTypeInternal;
extern QuantTransformerDefaultTypeInternal _QuantTransformer_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::QuantDecoderLayer* Arena::CreateMaybeMessage<::QuantDecoderLayer>(Arena*);
template<> ::QuantEmbeddingLayer* Arena::CreateMaybeMessage<::QuantEmbeddingLayer>(Arena*);
template<> ::QuantEncoderLayer* Arena::CreateMaybeMessage<::QuantEncoderLayer>(Arena*);
template<> ::QuantModelConf* Arena::CreateMaybeMessage<::QuantModelConf>(Arena*);
template<> ::QuantTransformer* Arena::CreateMaybeMessage<::QuantTransformer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class QuantEncoderLayer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:QuantEncoderLayer) */ {
 public:
  inline QuantEncoderLayer() : QuantEncoderLayer(nullptr) {}
  ~QuantEncoderLayer() override;
  explicit PROTOBUF_CONSTEXPR QuantEncoderLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuantEncoderLayer(const QuantEncoderLayer& from);
  QuantEncoderLayer(QuantEncoderLayer&& from) noexcept
    : QuantEncoderLayer() {
    *this = ::std::move(from);
  }

  inline QuantEncoderLayer& operator=(const QuantEncoderLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuantEncoderLayer& operator=(QuantEncoderLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const QuantEncoderLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuantEncoderLayer* internal_default_instance() {
    return reinterpret_cast<const QuantEncoderLayer*>(
               &_QuantEncoderLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QuantEncoderLayer& a, QuantEncoderLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(QuantEncoderLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuantEncoderLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuantEncoderLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuantEncoderLayer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const QuantEncoderLayer& from);
  void MergeFrom(const QuantEncoderLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QuantEncoderLayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QuantEncoderLayer";
  }
  protected:
  explicit QuantEncoderLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiheadNormScaleFieldNumber = 1,
    kMultiheadNormBiasFieldNumber = 2,
    kMultiheadProjectBiasQkvFieldNumber = 4,
    kMultiheadProjectBiasOutputFieldNumber = 6,
    kFfnNormScaleFieldNumber = 7,
    kFfnNormBiasFieldNumber = 8,
    kFfnFirstBiasFieldNumber = 10,
    kFfnSecondBiasFieldNumber = 12,
    kMultiheadProjectKernelQkvFieldNumber = 3,
    kMultiheadProjectKernelOutputFieldNumber = 5,
    kFfnFirstKernelFieldNumber = 9,
    kFfnSecondKernelFieldNumber = 11,
    kMultiheadProjectKernelQkvClipMaxFieldNumber = 13,
    kMultiheadProjectKernelOutputClipMaxFieldNumber = 14,
    kFfnFirstKernelClipMaxFieldNumber = 15,
    kFfnSecondKernelClipMaxFieldNumber = 16,
    kMultiheadLnClipMaxFieldNumber = 17,
    kMultiheadProjectOutputClipMaxFieldNumber = 18,
    kFfnLnClipMaxFieldNumber = 19,
    kFfnFirstActClipMaxFieldNumber = 20,
    kMultiheadQkvDenseClipMaxFieldNumber = 21,
    kMultiheadOutputDenseClipMaxFieldNumber = 22,
    kFfnFirstOutputClipMaxFieldNumber = 23,
    kFfnSecondOutputClipMaxFieldNumber = 24,
  };
  // repeated float multihead_norm_scale = 1;
  int multihead_norm_scale_size() const;
  private:
  int _internal_multihead_norm_scale_size() const;
  public:
  void clear_multihead_norm_scale();
  private:
  float _internal_multihead_norm_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_multihead_norm_scale() const;
  void _internal_add_multihead_norm_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_multihead_norm_scale();
  public:
  float multihead_norm_scale(int index) const;
  void set_multihead_norm_scale(int index, float value);
  void add_multihead_norm_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      multihead_norm_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_multihead_norm_scale();

  // repeated float multihead_norm_bias = 2;
  int multihead_norm_bias_size() const;
  private:
  int _internal_multihead_norm_bias_size() const;
  public:
  void clear_multihead_norm_bias();
  private:
  float _internal_multihead_norm_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_multihead_norm_bias() const;
  void _internal_add_multihead_norm_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_multihead_norm_bias();
  public:
  float multihead_norm_bias(int index) const;
  void set_multihead_norm_bias(int index, float value);
  void add_multihead_norm_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      multihead_norm_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_multihead_norm_bias();

  // repeated float multihead_project_bias_qkv = 4;
  int multihead_project_bias_qkv_size() const;
  private:
  int _internal_multihead_project_bias_qkv_size() const;
  public:
  void clear_multihead_project_bias_qkv();
  private:
  float _internal_multihead_project_bias_qkv(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_multihead_project_bias_qkv() const;
  void _internal_add_multihead_project_bias_qkv(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_multihead_project_bias_qkv();
  public:
  float multihead_project_bias_qkv(int index) const;
  void set_multihead_project_bias_qkv(int index, float value);
  void add_multihead_project_bias_qkv(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      multihead_project_bias_qkv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_multihead_project_bias_qkv();

  // repeated float multihead_project_bias_output = 6;
  int multihead_project_bias_output_size() const;
  private:
  int _internal_multihead_project_bias_output_size() const;
  public:
  void clear_multihead_project_bias_output();
  private:
  float _internal_multihead_project_bias_output(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_multihead_project_bias_output() const;
  void _internal_add_multihead_project_bias_output(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_multihead_project_bias_output();
  public:
  float multihead_project_bias_output(int index) const;
  void set_multihead_project_bias_output(int index, float value);
  void add_multihead_project_bias_output(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      multihead_project_bias_output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_multihead_project_bias_output();

  // repeated float ffn_norm_scale = 7;
  int ffn_norm_scale_size() const;
  private:
  int _internal_ffn_norm_scale_size() const;
  public:
  void clear_ffn_norm_scale();
  private:
  float _internal_ffn_norm_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_norm_scale() const;
  void _internal_add_ffn_norm_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_norm_scale();
  public:
  float ffn_norm_scale(int index) const;
  void set_ffn_norm_scale(int index, float value);
  void add_ffn_norm_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_norm_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_norm_scale();

  // repeated float ffn_norm_bias = 8;
  int ffn_norm_bias_size() const;
  private:
  int _internal_ffn_norm_bias_size() const;
  public:
  void clear_ffn_norm_bias();
  private:
  float _internal_ffn_norm_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_norm_bias() const;
  void _internal_add_ffn_norm_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_norm_bias();
  public:
  float ffn_norm_bias(int index) const;
  void set_ffn_norm_bias(int index, float value);
  void add_ffn_norm_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_norm_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_norm_bias();

  // repeated float ffn_first_bias = 10;
  int ffn_first_bias_size() const;
  private:
  int _internal_ffn_first_bias_size() const;
  public:
  void clear_ffn_first_bias();
  private:
  float _internal_ffn_first_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_first_bias() const;
  void _internal_add_ffn_first_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_first_bias();
  public:
  float ffn_first_bias(int index) const;
  void set_ffn_first_bias(int index, float value);
  void add_ffn_first_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_first_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_first_bias();

  // repeated float ffn_second_bias = 12;
  int ffn_second_bias_size() const;
  private:
  int _internal_ffn_second_bias_size() const;
  public:
  void clear_ffn_second_bias();
  private:
  float _internal_ffn_second_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_second_bias() const;
  void _internal_add_ffn_second_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_second_bias();
  public:
  float ffn_second_bias(int index) const;
  void set_ffn_second_bias(int index, float value);
  void add_ffn_second_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_second_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_second_bias();

  // bytes multihead_project_kernel_qkv = 3;
  void clear_multihead_project_kernel_qkv();
  const std::string& multihead_project_kernel_qkv() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_multihead_project_kernel_qkv(ArgT0&& arg0, ArgT... args);
  std::string* mutable_multihead_project_kernel_qkv();
  PROTOBUF_NODISCARD std::string* release_multihead_project_kernel_qkv();
  void set_allocated_multihead_project_kernel_qkv(std::string* multihead_project_kernel_qkv);
  private:
  const std::string& _internal_multihead_project_kernel_qkv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_multihead_project_kernel_qkv(const std::string& value);
  std::string* _internal_mutable_multihead_project_kernel_qkv();
  public:

  // bytes multihead_project_kernel_output = 5;
  void clear_multihead_project_kernel_output();
  const std::string& multihead_project_kernel_output() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_multihead_project_kernel_output(ArgT0&& arg0, ArgT... args);
  std::string* mutable_multihead_project_kernel_output();
  PROTOBUF_NODISCARD std::string* release_multihead_project_kernel_output();
  void set_allocated_multihead_project_kernel_output(std::string* multihead_project_kernel_output);
  private:
  const std::string& _internal_multihead_project_kernel_output() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_multihead_project_kernel_output(const std::string& value);
  std::string* _internal_mutable_multihead_project_kernel_output();
  public:

  // bytes ffn_first_kernel = 9;
  void clear_ffn_first_kernel();
  const std::string& ffn_first_kernel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ffn_first_kernel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ffn_first_kernel();
  PROTOBUF_NODISCARD std::string* release_ffn_first_kernel();
  void set_allocated_ffn_first_kernel(std::string* ffn_first_kernel);
  private:
  const std::string& _internal_ffn_first_kernel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ffn_first_kernel(const std::string& value);
  std::string* _internal_mutable_ffn_first_kernel();
  public:

  // bytes ffn_second_kernel = 11;
  void clear_ffn_second_kernel();
  const std::string& ffn_second_kernel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ffn_second_kernel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ffn_second_kernel();
  PROTOBUF_NODISCARD std::string* release_ffn_second_kernel();
  void set_allocated_ffn_second_kernel(std::string* ffn_second_kernel);
  private:
  const std::string& _internal_ffn_second_kernel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ffn_second_kernel(const std::string& value);
  std::string* _internal_mutable_ffn_second_kernel();
  public:

  // float multihead_project_kernel_qkv_clip_max = 13;
  void clear_multihead_project_kernel_qkv_clip_max();
  float multihead_project_kernel_qkv_clip_max() const;
  void set_multihead_project_kernel_qkv_clip_max(float value);
  private:
  float _internal_multihead_project_kernel_qkv_clip_max() const;
  void _internal_set_multihead_project_kernel_qkv_clip_max(float value);
  public:

  // float multihead_project_kernel_output_clip_max = 14;
  void clear_multihead_project_kernel_output_clip_max();
  float multihead_project_kernel_output_clip_max() const;
  void set_multihead_project_kernel_output_clip_max(float value);
  private:
  float _internal_multihead_project_kernel_output_clip_max() const;
  void _internal_set_multihead_project_kernel_output_clip_max(float value);
  public:

  // float ffn_first_kernel_clip_max = 15;
  void clear_ffn_first_kernel_clip_max();
  float ffn_first_kernel_clip_max() const;
  void set_ffn_first_kernel_clip_max(float value);
  private:
  float _internal_ffn_first_kernel_clip_max() const;
  void _internal_set_ffn_first_kernel_clip_max(float value);
  public:

  // float ffn_second_kernel_clip_max = 16;
  void clear_ffn_second_kernel_clip_max();
  float ffn_second_kernel_clip_max() const;
  void set_ffn_second_kernel_clip_max(float value);
  private:
  float _internal_ffn_second_kernel_clip_max() const;
  void _internal_set_ffn_second_kernel_clip_max(float value);
  public:

  // float multihead_ln_clip_max = 17;
  void clear_multihead_ln_clip_max();
  float multihead_ln_clip_max() const;
  void set_multihead_ln_clip_max(float value);
  private:
  float _internal_multihead_ln_clip_max() const;
  void _internal_set_multihead_ln_clip_max(float value);
  public:

  // float multihead_project_output_clip_max = 18;
  void clear_multihead_project_output_clip_max();
  float multihead_project_output_clip_max() const;
  void set_multihead_project_output_clip_max(float value);
  private:
  float _internal_multihead_project_output_clip_max() const;
  void _internal_set_multihead_project_output_clip_max(float value);
  public:

  // float ffn_ln_clip_max = 19;
  void clear_ffn_ln_clip_max();
  float ffn_ln_clip_max() const;
  void set_ffn_ln_clip_max(float value);
  private:
  float _internal_ffn_ln_clip_max() const;
  void _internal_set_ffn_ln_clip_max(float value);
  public:

  // float ffn_first_act_clip_max = 20;
  void clear_ffn_first_act_clip_max();
  float ffn_first_act_clip_max() const;
  void set_ffn_first_act_clip_max(float value);
  private:
  float _internal_ffn_first_act_clip_max() const;
  void _internal_set_ffn_first_act_clip_max(float value);
  public:

  // float multihead_qkv_dense_clip_max = 21;
  void clear_multihead_qkv_dense_clip_max();
  float multihead_qkv_dense_clip_max() const;
  void set_multihead_qkv_dense_clip_max(float value);
  private:
  float _internal_multihead_qkv_dense_clip_max() const;
  void _internal_set_multihead_qkv_dense_clip_max(float value);
  public:

  // float multihead_output_dense_clip_max = 22;
  void clear_multihead_output_dense_clip_max();
  float multihead_output_dense_clip_max() const;
  void set_multihead_output_dense_clip_max(float value);
  private:
  float _internal_multihead_output_dense_clip_max() const;
  void _internal_set_multihead_output_dense_clip_max(float value);
  public:

  // float ffn_first_output_clip_max = 23;
  void clear_ffn_first_output_clip_max();
  float ffn_first_output_clip_max() const;
  void set_ffn_first_output_clip_max(float value);
  private:
  float _internal_ffn_first_output_clip_max() const;
  void _internal_set_ffn_first_output_clip_max(float value);
  public:

  // float ffn_second_output_clip_max = 24;
  void clear_ffn_second_output_clip_max();
  float ffn_second_output_clip_max() const;
  void set_ffn_second_output_clip_max(float value);
  private:
  float _internal_ffn_second_output_clip_max() const;
  void _internal_set_ffn_second_output_clip_max(float value);
  public:

  // @@protoc_insertion_point(class_scope:QuantEncoderLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > multihead_norm_scale_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > multihead_norm_bias_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > multihead_project_bias_qkv_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > multihead_project_bias_output_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_norm_scale_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_norm_bias_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_first_bias_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_second_bias_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multihead_project_kernel_qkv_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multihead_project_kernel_output_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ffn_first_kernel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ffn_second_kernel_;
    float multihead_project_kernel_qkv_clip_max_;
    float multihead_project_kernel_output_clip_max_;
    float ffn_first_kernel_clip_max_;
    float ffn_second_kernel_clip_max_;
    float multihead_ln_clip_max_;
    float multihead_project_output_clip_max_;
    float ffn_ln_clip_max_;
    float ffn_first_act_clip_max_;
    float multihead_qkv_dense_clip_max_;
    float multihead_output_dense_clip_max_;
    float ffn_first_output_clip_max_;
    float ffn_second_output_clip_max_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quant_5ftransformer_2eproto;
};
// -------------------------------------------------------------------

class QuantDecoderLayer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:QuantDecoderLayer) */ {
 public:
  inline QuantDecoderLayer() : QuantDecoderLayer(nullptr) {}
  ~QuantDecoderLayer() override;
  explicit PROTOBUF_CONSTEXPR QuantDecoderLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuantDecoderLayer(const QuantDecoderLayer& from);
  QuantDecoderLayer(QuantDecoderLayer&& from) noexcept
    : QuantDecoderLayer() {
    *this = ::std::move(from);
  }

  inline QuantDecoderLayer& operator=(const QuantDecoderLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuantDecoderLayer& operator=(QuantDecoderLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const QuantDecoderLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuantDecoderLayer* internal_default_instance() {
    return reinterpret_cast<const QuantDecoderLayer*>(
               &_QuantDecoderLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QuantDecoderLayer& a, QuantDecoderLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(QuantDecoderLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuantDecoderLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuantDecoderLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuantDecoderLayer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const QuantDecoderLayer& from);
  void MergeFrom(const QuantDecoderLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QuantDecoderLayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QuantDecoderLayer";
  }
  protected:
  explicit QuantDecoderLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfNormScaleFieldNumber = 1,
    kSelfNormBiasFieldNumber = 2,
    kSelfProjectBiasQkvFieldNumber = 4,
    kSelfProjectBiasOutputFieldNumber = 6,
    kEncdecNormScaleFieldNumber = 7,
    kEncdecNormBiasFieldNumber = 8,
    kEncdecProjectBiasQFieldNumber = 10,
    kEncdecProjectBiasOutputFieldNumber = 12,
    kFfnNormScaleFieldNumber = 13,
    kFfnNormBiasFieldNumber = 14,
    kFfnFirstBiasFieldNumber = 16,
    kFfnSecondBiasFieldNumber = 18,
    kSelfProjectKernelQkvFieldNumber = 3,
    kSelfProjectKernelOutputFieldNumber = 5,
    kEncdecProjectKernelQFieldNumber = 9,
    kEncdecProjectKernelOutputFieldNumber = 11,
    kFfnFirstKernelFieldNumber = 15,
    kFfnSecondKernelFieldNumber = 17,
    kSelfProjectKernelQkvClipMaxFieldNumber = 19,
    kSelfProjectKernelOutputClipMaxFieldNumber = 20,
    kEncdecProjectKernelQClipMaxFieldNumber = 21,
    kEncdecProjectKernelOutputClipMaxFieldNumber = 22,
    kFfnFirstKernelClipMaxFieldNumber = 23,
    kFfnSecondKernelClipMaxFieldNumber = 24,
    kSelfLnClipMaxFieldNumber = 25,
    kSelfProjectOutputClipMaxFieldNumber = 26,
    kEncdecLnClipMaxFieldNumber = 27,
    kEncdecProjectOutputClipMaxFieldNumber = 28,
    kFfnLnClipMaxFieldNumber = 29,
    kFfnFirstActClipMaxFieldNumber = 30,
    kSelfQkvDenseClipMaxFieldNumber = 31,
    kSelfOutputDenseClipMaxFieldNumber = 32,
    kEncdecQDenseClipMaxFieldNumber = 33,
    kEncdecOutputDenseClipMaxFieldNumber = 34,
    kFfnFirstOutputClipMaxFieldNumber = 35,
    kFfnSecondOutputClipMaxFieldNumber = 36,
    kSelfQkvBiasOutClipMaxFieldNumber = 37,
    kEncdecQBiasOutClipMaxFieldNumber = 38,
    kEncdecKvBiasOutClipMaxFieldNumber = 39,
  };
  // repeated float self_norm_scale = 1;
  int self_norm_scale_size() const;
  private:
  int _internal_self_norm_scale_size() const;
  public:
  void clear_self_norm_scale();
  private:
  float _internal_self_norm_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_self_norm_scale() const;
  void _internal_add_self_norm_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_self_norm_scale();
  public:
  float self_norm_scale(int index) const;
  void set_self_norm_scale(int index, float value);
  void add_self_norm_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      self_norm_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_self_norm_scale();

  // repeated float self_norm_bias = 2;
  int self_norm_bias_size() const;
  private:
  int _internal_self_norm_bias_size() const;
  public:
  void clear_self_norm_bias();
  private:
  float _internal_self_norm_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_self_norm_bias() const;
  void _internal_add_self_norm_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_self_norm_bias();
  public:
  float self_norm_bias(int index) const;
  void set_self_norm_bias(int index, float value);
  void add_self_norm_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      self_norm_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_self_norm_bias();

  // repeated float self_project_bias_qkv = 4;
  int self_project_bias_qkv_size() const;
  private:
  int _internal_self_project_bias_qkv_size() const;
  public:
  void clear_self_project_bias_qkv();
  private:
  float _internal_self_project_bias_qkv(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_self_project_bias_qkv() const;
  void _internal_add_self_project_bias_qkv(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_self_project_bias_qkv();
  public:
  float self_project_bias_qkv(int index) const;
  void set_self_project_bias_qkv(int index, float value);
  void add_self_project_bias_qkv(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      self_project_bias_qkv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_self_project_bias_qkv();

  // repeated float self_project_bias_output = 6;
  int self_project_bias_output_size() const;
  private:
  int _internal_self_project_bias_output_size() const;
  public:
  void clear_self_project_bias_output();
  private:
  float _internal_self_project_bias_output(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_self_project_bias_output() const;
  void _internal_add_self_project_bias_output(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_self_project_bias_output();
  public:
  float self_project_bias_output(int index) const;
  void set_self_project_bias_output(int index, float value);
  void add_self_project_bias_output(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      self_project_bias_output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_self_project_bias_output();

  // repeated float encdec_norm_scale = 7;
  int encdec_norm_scale_size() const;
  private:
  int _internal_encdec_norm_scale_size() const;
  public:
  void clear_encdec_norm_scale();
  private:
  float _internal_encdec_norm_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_encdec_norm_scale() const;
  void _internal_add_encdec_norm_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_encdec_norm_scale();
  public:
  float encdec_norm_scale(int index) const;
  void set_encdec_norm_scale(int index, float value);
  void add_encdec_norm_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      encdec_norm_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_encdec_norm_scale();

  // repeated float encdec_norm_bias = 8;
  int encdec_norm_bias_size() const;
  private:
  int _internal_encdec_norm_bias_size() const;
  public:
  void clear_encdec_norm_bias();
  private:
  float _internal_encdec_norm_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_encdec_norm_bias() const;
  void _internal_add_encdec_norm_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_encdec_norm_bias();
  public:
  float encdec_norm_bias(int index) const;
  void set_encdec_norm_bias(int index, float value);
  void add_encdec_norm_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      encdec_norm_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_encdec_norm_bias();

  // repeated float encdec_project_bias_q = 10;
  int encdec_project_bias_q_size() const;
  private:
  int _internal_encdec_project_bias_q_size() const;
  public:
  void clear_encdec_project_bias_q();
  private:
  float _internal_encdec_project_bias_q(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_encdec_project_bias_q() const;
  void _internal_add_encdec_project_bias_q(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_encdec_project_bias_q();
  public:
  float encdec_project_bias_q(int index) const;
  void set_encdec_project_bias_q(int index, float value);
  void add_encdec_project_bias_q(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      encdec_project_bias_q() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_encdec_project_bias_q();

  // repeated float encdec_project_bias_output = 12;
  int encdec_project_bias_output_size() const;
  private:
  int _internal_encdec_project_bias_output_size() const;
  public:
  void clear_encdec_project_bias_output();
  private:
  float _internal_encdec_project_bias_output(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_encdec_project_bias_output() const;
  void _internal_add_encdec_project_bias_output(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_encdec_project_bias_output();
  public:
  float encdec_project_bias_output(int index) const;
  void set_encdec_project_bias_output(int index, float value);
  void add_encdec_project_bias_output(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      encdec_project_bias_output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_encdec_project_bias_output();

  // repeated float ffn_norm_scale = 13;
  int ffn_norm_scale_size() const;
  private:
  int _internal_ffn_norm_scale_size() const;
  public:
  void clear_ffn_norm_scale();
  private:
  float _internal_ffn_norm_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_norm_scale() const;
  void _internal_add_ffn_norm_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_norm_scale();
  public:
  float ffn_norm_scale(int index) const;
  void set_ffn_norm_scale(int index, float value);
  void add_ffn_norm_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_norm_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_norm_scale();

  // repeated float ffn_norm_bias = 14;
  int ffn_norm_bias_size() const;
  private:
  int _internal_ffn_norm_bias_size() const;
  public:
  void clear_ffn_norm_bias();
  private:
  float _internal_ffn_norm_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_norm_bias() const;
  void _internal_add_ffn_norm_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_norm_bias();
  public:
  float ffn_norm_bias(int index) const;
  void set_ffn_norm_bias(int index, float value);
  void add_ffn_norm_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_norm_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_norm_bias();

  // repeated float ffn_first_bias = 16;
  int ffn_first_bias_size() const;
  private:
  int _internal_ffn_first_bias_size() const;
  public:
  void clear_ffn_first_bias();
  private:
  float _internal_ffn_first_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_first_bias() const;
  void _internal_add_ffn_first_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_first_bias();
  public:
  float ffn_first_bias(int index) const;
  void set_ffn_first_bias(int index, float value);
  void add_ffn_first_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_first_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_first_bias();

  // repeated float ffn_second_bias = 18;
  int ffn_second_bias_size() const;
  private:
  int _internal_ffn_second_bias_size() const;
  public:
  void clear_ffn_second_bias();
  private:
  float _internal_ffn_second_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ffn_second_bias() const;
  void _internal_add_ffn_second_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ffn_second_bias();
  public:
  float ffn_second_bias(int index) const;
  void set_ffn_second_bias(int index, float value);
  void add_ffn_second_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ffn_second_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ffn_second_bias();

  // bytes self_project_kernel_qkv = 3;
  void clear_self_project_kernel_qkv();
  const std::string& self_project_kernel_qkv() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_project_kernel_qkv(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_project_kernel_qkv();
  PROTOBUF_NODISCARD std::string* release_self_project_kernel_qkv();
  void set_allocated_self_project_kernel_qkv(std::string* self_project_kernel_qkv);
  private:
  const std::string& _internal_self_project_kernel_qkv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_project_kernel_qkv(const std::string& value);
  std::string* _internal_mutable_self_project_kernel_qkv();
  public:

  // bytes self_project_kernel_output = 5;
  void clear_self_project_kernel_output();
  const std::string& self_project_kernel_output() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_project_kernel_output(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_project_kernel_output();
  PROTOBUF_NODISCARD std::string* release_self_project_kernel_output();
  void set_allocated_self_project_kernel_output(std::string* self_project_kernel_output);
  private:
  const std::string& _internal_self_project_kernel_output() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_project_kernel_output(const std::string& value);
  std::string* _internal_mutable_self_project_kernel_output();
  public:

  // bytes encdec_project_kernel_q = 9;
  void clear_encdec_project_kernel_q();
  const std::string& encdec_project_kernel_q() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encdec_project_kernel_q(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encdec_project_kernel_q();
  PROTOBUF_NODISCARD std::string* release_encdec_project_kernel_q();
  void set_allocated_encdec_project_kernel_q(std::string* encdec_project_kernel_q);
  private:
  const std::string& _internal_encdec_project_kernel_q() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encdec_project_kernel_q(const std::string& value);
  std::string* _internal_mutable_encdec_project_kernel_q();
  public:

  // bytes encdec_project_kernel_output = 11;
  void clear_encdec_project_kernel_output();
  const std::string& encdec_project_kernel_output() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encdec_project_kernel_output(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encdec_project_kernel_output();
  PROTOBUF_NODISCARD std::string* release_encdec_project_kernel_output();
  void set_allocated_encdec_project_kernel_output(std::string* encdec_project_kernel_output);
  private:
  const std::string& _internal_encdec_project_kernel_output() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encdec_project_kernel_output(const std::string& value);
  std::string* _internal_mutable_encdec_project_kernel_output();
  public:

  // bytes ffn_first_kernel = 15;
  void clear_ffn_first_kernel();
  const std::string& ffn_first_kernel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ffn_first_kernel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ffn_first_kernel();
  PROTOBUF_NODISCARD std::string* release_ffn_first_kernel();
  void set_allocated_ffn_first_kernel(std::string* ffn_first_kernel);
  private:
  const std::string& _internal_ffn_first_kernel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ffn_first_kernel(const std::string& value);
  std::string* _internal_mutable_ffn_first_kernel();
  public:

  // bytes ffn_second_kernel = 17;
  void clear_ffn_second_kernel();
  const std::string& ffn_second_kernel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ffn_second_kernel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ffn_second_kernel();
  PROTOBUF_NODISCARD std::string* release_ffn_second_kernel();
  void set_allocated_ffn_second_kernel(std::string* ffn_second_kernel);
  private:
  const std::string& _internal_ffn_second_kernel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ffn_second_kernel(const std::string& value);
  std::string* _internal_mutable_ffn_second_kernel();
  public:

  // float self_project_kernel_qkv_clip_max = 19;
  void clear_self_project_kernel_qkv_clip_max();
  float self_project_kernel_qkv_clip_max() const;
  void set_self_project_kernel_qkv_clip_max(float value);
  private:
  float _internal_self_project_kernel_qkv_clip_max() const;
  void _internal_set_self_project_kernel_qkv_clip_max(float value);
  public:

  // float self_project_kernel_output_clip_max = 20;
  void clear_self_project_kernel_output_clip_max();
  float self_project_kernel_output_clip_max() const;
  void set_self_project_kernel_output_clip_max(float value);
  private:
  float _internal_self_project_kernel_output_clip_max() const;
  void _internal_set_self_project_kernel_output_clip_max(float value);
  public:

  // float encdec_project_kernel_q_clip_max = 21;
  void clear_encdec_project_kernel_q_clip_max();
  float encdec_project_kernel_q_clip_max() const;
  void set_encdec_project_kernel_q_clip_max(float value);
  private:
  float _internal_encdec_project_kernel_q_clip_max() const;
  void _internal_set_encdec_project_kernel_q_clip_max(float value);
  public:

  // float encdec_project_kernel_output_clip_max = 22;
  void clear_encdec_project_kernel_output_clip_max();
  float encdec_project_kernel_output_clip_max() const;
  void set_encdec_project_kernel_output_clip_max(float value);
  private:
  float _internal_encdec_project_kernel_output_clip_max() const;
  void _internal_set_encdec_project_kernel_output_clip_max(float value);
  public:

  // float ffn_first_kernel_clip_max = 23;
  void clear_ffn_first_kernel_clip_max();
  float ffn_first_kernel_clip_max() const;
  void set_ffn_first_kernel_clip_max(float value);
  private:
  float _internal_ffn_first_kernel_clip_max() const;
  void _internal_set_ffn_first_kernel_clip_max(float value);
  public:

  // float ffn_second_kernel_clip_max = 24;
  void clear_ffn_second_kernel_clip_max();
  float ffn_second_kernel_clip_max() const;
  void set_ffn_second_kernel_clip_max(float value);
  private:
  float _internal_ffn_second_kernel_clip_max() const;
  void _internal_set_ffn_second_kernel_clip_max(float value);
  public:

  // float self_ln_clip_max = 25;
  void clear_self_ln_clip_max();
  float self_ln_clip_max() const;
  void set_self_ln_clip_max(float value);
  private:
  float _internal_self_ln_clip_max() const;
  void _internal_set_self_ln_clip_max(float value);
  public:

  // float self_project_output_clip_max = 26;
  void clear_self_project_output_clip_max();
  float self_project_output_clip_max() const;
  void set_self_project_output_clip_max(float value);
  private:
  float _internal_self_project_output_clip_max() const;
  void _internal_set_self_project_output_clip_max(float value);
  public:

  // float encdec_ln_clip_max = 27;
  void clear_encdec_ln_clip_max();
  float encdec_ln_clip_max() const;
  void set_encdec_ln_clip_max(float value);
  private:
  float _internal_encdec_ln_clip_max() const;
  void _internal_set_encdec_ln_clip_max(float value);
  public:

  // float encdec_project_output_clip_max = 28;
  void clear_encdec_project_output_clip_max();
  float encdec_project_output_clip_max() const;
  void set_encdec_project_output_clip_max(float value);
  private:
  float _internal_encdec_project_output_clip_max() const;
  void _internal_set_encdec_project_output_clip_max(float value);
  public:

  // float ffn_ln_clip_max = 29;
  void clear_ffn_ln_clip_max();
  float ffn_ln_clip_max() const;
  void set_ffn_ln_clip_max(float value);
  private:
  float _internal_ffn_ln_clip_max() const;
  void _internal_set_ffn_ln_clip_max(float value);
  public:

  // float ffn_first_act_clip_max = 30;
  void clear_ffn_first_act_clip_max();
  float ffn_first_act_clip_max() const;
  void set_ffn_first_act_clip_max(float value);
  private:
  float _internal_ffn_first_act_clip_max() const;
  void _internal_set_ffn_first_act_clip_max(float value);
  public:

  // float self_qkv_dense_clip_max = 31;
  void clear_self_qkv_dense_clip_max();
  float self_qkv_dense_clip_max() const;
  void set_self_qkv_dense_clip_max(float value);
  private:
  float _internal_self_qkv_dense_clip_max() const;
  void _internal_set_self_qkv_dense_clip_max(float value);
  public:

  // float self_output_dense_clip_max = 32;
  void clear_self_output_dense_clip_max();
  float self_output_dense_clip_max() const;
  void set_self_output_dense_clip_max(float value);
  private:
  float _internal_self_output_dense_clip_max() const;
  void _internal_set_self_output_dense_clip_max(float value);
  public:

  // float encdec_q_dense_clip_max = 33;
  void clear_encdec_q_dense_clip_max();
  float encdec_q_dense_clip_max() const;
  void set_encdec_q_dense_clip_max(float value);
  private:
  float _internal_encdec_q_dense_clip_max() const;
  void _internal_set_encdec_q_dense_clip_max(float value);
  public:

  // float encdec_output_dense_clip_max = 34;
  void clear_encdec_output_dense_clip_max();
  float encdec_output_dense_clip_max() const;
  void set_encdec_output_dense_clip_max(float value);
  private:
  float _internal_encdec_output_dense_clip_max() const;
  void _internal_set_encdec_output_dense_clip_max(float value);
  public:

  // float ffn_first_output_clip_max = 35;
  void clear_ffn_first_output_clip_max();
  float ffn_first_output_clip_max() const;
  void set_ffn_first_output_clip_max(float value);
  private:
  float _internal_ffn_first_output_clip_max() const;
  void _internal_set_ffn_first_output_clip_max(float value);
  public:

  // float ffn_second_output_clip_max = 36;
  void clear_ffn_second_output_clip_max();
  float ffn_second_output_clip_max() const;
  void set_ffn_second_output_clip_max(float value);
  private:
  float _internal_ffn_second_output_clip_max() const;
  void _internal_set_ffn_second_output_clip_max(float value);
  public:

  // float self_qkv_bias_out_clip_max = 37;
  void clear_self_qkv_bias_out_clip_max();
  float self_qkv_bias_out_clip_max() const;
  void set_self_qkv_bias_out_clip_max(float value);
  private:
  float _internal_self_qkv_bias_out_clip_max() const;
  void _internal_set_self_qkv_bias_out_clip_max(float value);
  public:

  // float encdec_q_bias_out_clip_max = 38;
  void clear_encdec_q_bias_out_clip_max();
  float encdec_q_bias_out_clip_max() const;
  void set_encdec_q_bias_out_clip_max(float value);
  private:
  float _internal_encdec_q_bias_out_clip_max() const;
  void _internal_set_encdec_q_bias_out_clip_max(float value);
  public:

  // float encdec_kv_bias_out_clip_max = 39;
  void clear_encdec_kv_bias_out_clip_max();
  float encdec_kv_bias_out_clip_max() const;
  void set_encdec_kv_bias_out_clip_max(float value);
  private:
  float _internal_encdec_kv_bias_out_clip_max() const;
  void _internal_set_encdec_kv_bias_out_clip_max(float value);
  public:

  // @@protoc_insertion_point(class_scope:QuantDecoderLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > self_norm_scale_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > self_norm_bias_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > self_project_bias_qkv_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > self_project_bias_output_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > encdec_norm_scale_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > encdec_norm_bias_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > encdec_project_bias_q_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > encdec_project_bias_output_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_norm_scale_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_norm_bias_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_first_bias_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ffn_second_bias_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_project_kernel_qkv_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_project_kernel_output_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encdec_project_kernel_q_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encdec_project_kernel_output_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ffn_first_kernel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ffn_second_kernel_;
    float self_project_kernel_qkv_clip_max_;
    float self_project_kernel_output_clip_max_;
    float encdec_project_kernel_q_clip_max_;
    float encdec_project_kernel_output_clip_max_;
    float ffn_first_kernel_clip_max_;
    float ffn_second_kernel_clip_max_;
    float self_ln_clip_max_;
    float self_project_output_clip_max_;
    float encdec_ln_clip_max_;
    float encdec_project_output_clip_max_;
    float ffn_ln_clip_max_;
    float ffn_first_act_clip_max_;
    float self_qkv_dense_clip_max_;
    float self_output_dense_clip_max_;
    float encdec_q_dense_clip_max_;
    float encdec_output_dense_clip_max_;
    float ffn_first_output_clip_max_;
    float ffn_second_output_clip_max_;
    float self_qkv_bias_out_clip_max_;
    float encdec_q_bias_out_clip_max_;
    float encdec_kv_bias_out_clip_max_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quant_5ftransformer_2eproto;
};
// -------------------------------------------------------------------

class QuantEmbeddingLayer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:QuantEmbeddingLayer) */ {
 public:
  inline QuantEmbeddingLayer() : QuantEmbeddingLayer(nullptr) {}
  ~QuantEmbeddingLayer() override;
  explicit PROTOBUF_CONSTEXPR QuantEmbeddingLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuantEmbeddingLayer(const QuantEmbeddingLayer& from);
  QuantEmbeddingLayer(QuantEmbeddingLayer&& from) noexcept
    : QuantEmbeddingLayer() {
    *this = ::std::move(from);
  }

  inline QuantEmbeddingLayer& operator=(const QuantEmbeddingLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuantEmbeddingLayer& operator=(QuantEmbeddingLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const QuantEmbeddingLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuantEmbeddingLayer* internal_default_instance() {
    return reinterpret_cast<const QuantEmbeddingLayer*>(
               &_QuantEmbeddingLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QuantEmbeddingLayer& a, QuantEmbeddingLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(QuantEmbeddingLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuantEmbeddingLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuantEmbeddingLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuantEmbeddingLayer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const QuantEmbeddingLayer& from);
  void MergeFrom(const QuantEmbeddingLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QuantEmbeddingLayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QuantEmbeddingLayer";
  }
  protected:
  explicit QuantEmbeddingLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionEmbeddingFieldNumber = 2,
    kNormScaleFieldNumber = 3,
    kNormBiasFieldNumber = 4,
    kEncodeOutputProjectBiasKvFieldNumber = 6,
    kSharedBiasFieldNumber = 7,
    kLangEmbFieldNumber = 8,
    kEncodeOutputProjectKernelKvClipMaxFieldNumber = 10,
    kTokenEmbeddingFieldNumber = 1,
    kEncodeOutputProjectKernelKvFieldNumber = 5,
    kEmbClipMaxFieldNumber = 9,
    kOutputLnClipMaxFieldNumber = 11,
    kLogitsClipMaxFieldNumber = 12,
    kEncoderOutputClipMaxFieldNumber = 13,
  };
  // repeated float position_embedding = 2;
  int position_embedding_size() const;
  private:
  int _internal_position_embedding_size() const;
  public:
  void clear_position_embedding();
  private:
  float _internal_position_embedding(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_position_embedding() const;
  void _internal_add_position_embedding(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_position_embedding();
  public:
  float position_embedding(int index) const;
  void set_position_embedding(int index, float value);
  void add_position_embedding(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      position_embedding() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_position_embedding();

  // repeated float norm_scale = 3;
  int norm_scale_size() const;
  private:
  int _internal_norm_scale_size() const;
  public:
  void clear_norm_scale();
  private:
  float _internal_norm_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_norm_scale() const;
  void _internal_add_norm_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_norm_scale();
  public:
  float norm_scale(int index) const;
  void set_norm_scale(int index, float value);
  void add_norm_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      norm_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_norm_scale();

  // repeated float norm_bias = 4;
  int norm_bias_size() const;
  private:
  int _internal_norm_bias_size() const;
  public:
  void clear_norm_bias();
  private:
  float _internal_norm_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_norm_bias() const;
  void _internal_add_norm_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_norm_bias();
  public:
  float norm_bias(int index) const;
  void set_norm_bias(int index, float value);
  void add_norm_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      norm_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_norm_bias();

  // repeated float encode_output_project_bias_kv = 6;
  int encode_output_project_bias_kv_size() const;
  private:
  int _internal_encode_output_project_bias_kv_size() const;
  public:
  void clear_encode_output_project_bias_kv();
  private:
  float _internal_encode_output_project_bias_kv(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_encode_output_project_bias_kv() const;
  void _internal_add_encode_output_project_bias_kv(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_encode_output_project_bias_kv();
  public:
  float encode_output_project_bias_kv(int index) const;
  void set_encode_output_project_bias_kv(int index, float value);
  void add_encode_output_project_bias_kv(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      encode_output_project_bias_kv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_encode_output_project_bias_kv();

  // repeated float shared_bias = 7;
  int shared_bias_size() const;
  private:
  int _internal_shared_bias_size() const;
  public:
  void clear_shared_bias();
  private:
  float _internal_shared_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_shared_bias() const;
  void _internal_add_shared_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_shared_bias();
  public:
  float shared_bias(int index) const;
  void set_shared_bias(int index, float value);
  void add_shared_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      shared_bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_shared_bias();

  // repeated float lang_emb = 8;
  int lang_emb_size() const;
  private:
  int _internal_lang_emb_size() const;
  public:
  void clear_lang_emb();
  private:
  float _internal_lang_emb(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_lang_emb() const;
  void _internal_add_lang_emb(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_lang_emb();
  public:
  float lang_emb(int index) const;
  void set_lang_emb(int index, float value);
  void add_lang_emb(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      lang_emb() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_lang_emb();

  // repeated float encode_output_project_kernel_kv_clip_max = 10;
  int encode_output_project_kernel_kv_clip_max_size() const;
  private:
  int _internal_encode_output_project_kernel_kv_clip_max_size() const;
  public:
  void clear_encode_output_project_kernel_kv_clip_max();
  private:
  float _internal_encode_output_project_kernel_kv_clip_max(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_encode_output_project_kernel_kv_clip_max() const;
  void _internal_add_encode_output_project_kernel_kv_clip_max(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_encode_output_project_kernel_kv_clip_max();
  public:
  float encode_output_project_kernel_kv_clip_max(int index) const;
  void set_encode_output_project_kernel_kv_clip_max(int index, float value);
  void add_encode_output_project_kernel_kv_clip_max(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      encode_output_project_kernel_kv_clip_max() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_encode_output_project_kernel_kv_clip_max();

  // bytes token_embedding = 1;
  void clear_token_embedding();
  const std::string& token_embedding() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_embedding(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_embedding();
  PROTOBUF_NODISCARD std::string* release_token_embedding();
  void set_allocated_token_embedding(std::string* token_embedding);
  private:
  const std::string& _internal_token_embedding() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_embedding(const std::string& value);
  std::string* _internal_mutable_token_embedding();
  public:

  // bytes encode_output_project_kernel_kv = 5;
  void clear_encode_output_project_kernel_kv();
  const std::string& encode_output_project_kernel_kv() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encode_output_project_kernel_kv(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encode_output_project_kernel_kv();
  PROTOBUF_NODISCARD std::string* release_encode_output_project_kernel_kv();
  void set_allocated_encode_output_project_kernel_kv(std::string* encode_output_project_kernel_kv);
  private:
  const std::string& _internal_encode_output_project_kernel_kv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encode_output_project_kernel_kv(const std::string& value);
  std::string* _internal_mutable_encode_output_project_kernel_kv();
  public:

  // float emb_clip_max = 9;
  void clear_emb_clip_max();
  float emb_clip_max() const;
  void set_emb_clip_max(float value);
  private:
  float _internal_emb_clip_max() const;
  void _internal_set_emb_clip_max(float value);
  public:

  // float output_ln_clip_max = 11;
  void clear_output_ln_clip_max();
  float output_ln_clip_max() const;
  void set_output_ln_clip_max(float value);
  private:
  float _internal_output_ln_clip_max() const;
  void _internal_set_output_ln_clip_max(float value);
  public:

  // float logits_clip_max = 12;
  void clear_logits_clip_max();
  float logits_clip_max() const;
  void set_logits_clip_max(float value);
  private:
  float _internal_logits_clip_max() const;
  void _internal_set_logits_clip_max(float value);
  public:

  // float encoder_output_clip_max = 13;
  void clear_encoder_output_clip_max();
  float encoder_output_clip_max() const;
  void set_encoder_output_clip_max(float value);
  private:
  float _internal_encoder_output_clip_max() const;
  void _internal_set_encoder_output_clip_max(float value);
  public:

  // @@protoc_insertion_point(class_scope:QuantEmbeddingLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > position_embedding_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > norm_scale_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > norm_bias_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > encode_output_project_bias_kv_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > shared_bias_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > lang_emb_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > encode_output_project_kernel_kv_clip_max_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_embedding_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encode_output_project_kernel_kv_;
    float emb_clip_max_;
    float output_ln_clip_max_;
    float logits_clip_max_;
    float encoder_output_clip_max_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quant_5ftransformer_2eproto;
};
// -------------------------------------------------------------------

class QuantModelConf final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:QuantModelConf) */ {
 public:
  inline QuantModelConf() : QuantModelConf(nullptr) {}
  ~QuantModelConf() override;
  explicit PROTOBUF_CONSTEXPR QuantModelConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuantModelConf(const QuantModelConf& from);
  QuantModelConf(QuantModelConf&& from) noexcept
    : QuantModelConf() {
    *this = ::std::move(from);
  }

  inline QuantModelConf& operator=(const QuantModelConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuantModelConf& operator=(QuantModelConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const QuantModelConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuantModelConf* internal_default_instance() {
    return reinterpret_cast<const QuantModelConf*>(
               &_QuantModelConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QuantModelConf& a, QuantModelConf& b) {
    a.Swap(&b);
  }
  inline void Swap(QuantModelConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuantModelConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuantModelConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuantModelConf>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const QuantModelConf& from);
  void MergeFrom(const QuantModelConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QuantModelConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QuantModelConf";
  }
  protected:
  explicit QuantModelConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplingMethodFieldNumber = 8,
    kHeadNumFieldNumber = 1,
    kBeamSizeFieldNumber = 2,
    kExtraDecodeLengthFieldNumber = 3,
    kLengthPenaltyFieldNumber = 4,
    kSrcPaddingIdFieldNumber = 5,
    kTrgStartIdFieldNumber = 6,
    kDiverseLambdaFieldNumber = 7,
    kToppFieldNumber = 9,
    kTopkFieldNumber = 10,
    kTrgEndIdFieldNumber = 11,
    kIsPostLnFieldNumber = 12,
    kNoScaleEmbeddingFieldNumber = 13,
    kUseGeluFieldNumber = 14,
    kMultilgTypeFieldNumber = 15,
    kNEncoderStackFieldNumber = 16,
    kNDecoderStackFieldNumber = 17,
    kGreedyLenAFieldNumber = 18,
    kGreedyLenBFieldNumber = 19,
  };
  // string sampling_method = 8;
  void clear_sampling_method();
  const std::string& sampling_method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sampling_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sampling_method();
  PROTOBUF_NODISCARD std::string* release_sampling_method();
  void set_allocated_sampling_method(std::string* sampling_method);
  private:
  const std::string& _internal_sampling_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sampling_method(const std::string& value);
  std::string* _internal_mutable_sampling_method();
  public:

  // int32 head_num = 1;
  void clear_head_num();
  int32_t head_num() const;
  void set_head_num(int32_t value);
  private:
  int32_t _internal_head_num() const;
  void _internal_set_head_num(int32_t value);
  public:

  // int32 beam_size = 2;
  void clear_beam_size();
  int32_t beam_size() const;
  void set_beam_size(int32_t value);
  private:
  int32_t _internal_beam_size() const;
  void _internal_set_beam_size(int32_t value);
  public:

  // int32 extra_decode_length = 3;
  void clear_extra_decode_length();
  int32_t extra_decode_length() const;
  void set_extra_decode_length(int32_t value);
  private:
  int32_t _internal_extra_decode_length() const;
  void _internal_set_extra_decode_length(int32_t value);
  public:

  // float length_penalty = 4;
  void clear_length_penalty();
  float length_penalty() const;
  void set_length_penalty(float value);
  private:
  float _internal_length_penalty() const;
  void _internal_set_length_penalty(float value);
  public:

  // int32 src_padding_id = 5;
  void clear_src_padding_id();
  int32_t src_padding_id() const;
  void set_src_padding_id(int32_t value);
  private:
  int32_t _internal_src_padding_id() const;
  void _internal_set_src_padding_id(int32_t value);
  public:

  // int32 trg_start_id = 6;
  void clear_trg_start_id();
  int32_t trg_start_id() const;
  void set_trg_start_id(int32_t value);
  private:
  int32_t _internal_trg_start_id() const;
  void _internal_set_trg_start_id(int32_t value);
  public:

  // float diverse_lambda = 7;
  void clear_diverse_lambda();
  float diverse_lambda() const;
  void set_diverse_lambda(float value);
  private:
  float _internal_diverse_lambda() const;
  void _internal_set_diverse_lambda(float value);
  public:

  // float topp = 9;
  void clear_topp();
  float topp() const;
  void set_topp(float value);
  private:
  float _internal_topp() const;
  void _internal_set_topp(float value);
  public:

  // int32 topk = 10;
  void clear_topk();
  int32_t topk() const;
  void set_topk(int32_t value);
  private:
  int32_t _internal_topk() const;
  void _internal_set_topk(int32_t value);
  public:

  // int32 trg_end_id = 11;
  void clear_trg_end_id();
  int32_t trg_end_id() const;
  void set_trg_end_id(int32_t value);
  private:
  int32_t _internal_trg_end_id() const;
  void _internal_set_trg_end_id(int32_t value);
  public:

  // bool is_post_ln = 12;
  void clear_is_post_ln();
  bool is_post_ln() const;
  void set_is_post_ln(bool value);
  private:
  bool _internal_is_post_ln() const;
  void _internal_set_is_post_ln(bool value);
  public:

  // bool no_scale_embedding = 13;
  void clear_no_scale_embedding();
  bool no_scale_embedding() const;
  void set_no_scale_embedding(bool value);
  private:
  bool _internal_no_scale_embedding() const;
  void _internal_set_no_scale_embedding(bool value);
  public:

  // bool use_gelu = 14;
  void clear_use_gelu();
  bool use_gelu() const;
  void set_use_gelu(bool value);
  private:
  bool _internal_use_gelu() const;
  void _internal_set_use_gelu(bool value);
  public:

  // int32 multilg_type = 15;
  void clear_multilg_type();
  int32_t multilg_type() const;
  void set_multilg_type(int32_t value);
  private:
  int32_t _internal_multilg_type() const;
  void _internal_set_multilg_type(int32_t value);
  public:

  // int32 n_encoder_stack = 16;
  void clear_n_encoder_stack();
  int32_t n_encoder_stack() const;
  void set_n_encoder_stack(int32_t value);
  private:
  int32_t _internal_n_encoder_stack() const;
  void _internal_set_n_encoder_stack(int32_t value);
  public:

  // int32 n_decoder_stack = 17;
  void clear_n_decoder_stack();
  int32_t n_decoder_stack() const;
  void set_n_decoder_stack(int32_t value);
  private:
  int32_t _internal_n_decoder_stack() const;
  void _internal_set_n_decoder_stack(int32_t value);
  public:

  // float greedy_len_a = 18;
  void clear_greedy_len_a();
  float greedy_len_a() const;
  void set_greedy_len_a(float value);
  private:
  float _internal_greedy_len_a() const;
  void _internal_set_greedy_len_a(float value);
  public:

  // int32 greedy_len_b = 19;
  void clear_greedy_len_b();
  int32_t greedy_len_b() const;
  void set_greedy_len_b(int32_t value);
  private:
  int32_t _internal_greedy_len_b() const;
  void _internal_set_greedy_len_b(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:QuantModelConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sampling_method_;
    int32_t head_num_;
    int32_t beam_size_;
    int32_t extra_decode_length_;
    float length_penalty_;
    int32_t src_padding_id_;
    int32_t trg_start_id_;
    float diverse_lambda_;
    float topp_;
    int32_t topk_;
    int32_t trg_end_id_;
    bool is_post_ln_;
    bool no_scale_embedding_;
    bool use_gelu_;
    int32_t multilg_type_;
    int32_t n_encoder_stack_;
    int32_t n_decoder_stack_;
    float greedy_len_a_;
    int32_t greedy_len_b_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quant_5ftransformer_2eproto;
};
// -------------------------------------------------------------------

class QuantTransformer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:QuantTransformer) */ {
 public:
  inline QuantTransformer() : QuantTransformer(nullptr) {}
  ~QuantTransformer() override;
  explicit PROTOBUF_CONSTEXPR QuantTransformer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuantTransformer(const QuantTransformer& from);
  QuantTransformer(QuantTransformer&& from) noexcept
    : QuantTransformer() {
    *this = ::std::move(from);
  }

  inline QuantTransformer& operator=(const QuantTransformer& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuantTransformer& operator=(QuantTransformer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const QuantTransformer& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuantTransformer* internal_default_instance() {
    return reinterpret_cast<const QuantTransformer*>(
               &_QuantTransformer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QuantTransformer& a, QuantTransformer& b) {
    a.Swap(&b);
  }
  inline void Swap(QuantTransformer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuantTransformer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuantTransformer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuantTransformer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const QuantTransformer& from);
  void MergeFrom(const QuantTransformer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QuantTransformer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QuantTransformer";
  }
  protected:
  explicit QuantTransformer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncoderStackFieldNumber = 2,
    kDecoderStackFieldNumber = 4,
    kSrcEmbeddingFieldNumber = 1,
    kTrgEmbeddingFieldNumber = 3,
    kModelConfFieldNumber = 5,
  };
  // repeated .QuantEncoderLayer encoder_stack = 2;
  int encoder_stack_size() const;
  private:
  int _internal_encoder_stack_size() const;
  public:
  void clear_encoder_stack();
  ::QuantEncoderLayer* mutable_encoder_stack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QuantEncoderLayer >*
      mutable_encoder_stack();
  private:
  const ::QuantEncoderLayer& _internal_encoder_stack(int index) const;
  ::QuantEncoderLayer* _internal_add_encoder_stack();
  public:
  const ::QuantEncoderLayer& encoder_stack(int index) const;
  ::QuantEncoderLayer* add_encoder_stack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QuantEncoderLayer >&
      encoder_stack() const;

  // repeated .QuantDecoderLayer decoder_stack = 4;
  int decoder_stack_size() const;
  private:
  int _internal_decoder_stack_size() const;
  public:
  void clear_decoder_stack();
  ::QuantDecoderLayer* mutable_decoder_stack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QuantDecoderLayer >*
      mutable_decoder_stack();
  private:
  const ::QuantDecoderLayer& _internal_decoder_stack(int index) const;
  ::QuantDecoderLayer* _internal_add_decoder_stack();
  public:
  const ::QuantDecoderLayer& decoder_stack(int index) const;
  ::QuantDecoderLayer* add_decoder_stack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QuantDecoderLayer >&
      decoder_stack() const;

  // .QuantEmbeddingLayer src_embedding = 1;
  bool has_src_embedding() const;
  private:
  bool _internal_has_src_embedding() const;
  public:
  void clear_src_embedding();
  const ::QuantEmbeddingLayer& src_embedding() const;
  PROTOBUF_NODISCARD ::QuantEmbeddingLayer* release_src_embedding();
  ::QuantEmbeddingLayer* mutable_src_embedding();
  void set_allocated_src_embedding(::QuantEmbeddingLayer* src_embedding);
  private:
  const ::QuantEmbeddingLayer& _internal_src_embedding() const;
  ::QuantEmbeddingLayer* _internal_mutable_src_embedding();
  public:
  void unsafe_arena_set_allocated_src_embedding(
      ::QuantEmbeddingLayer* src_embedding);
  ::QuantEmbeddingLayer* unsafe_arena_release_src_embedding();

  // .QuantEmbeddingLayer trg_embedding = 3;
  bool has_trg_embedding() const;
  private:
  bool _internal_has_trg_embedding() const;
  public:
  void clear_trg_embedding();
  const ::QuantEmbeddingLayer& trg_embedding() const;
  PROTOBUF_NODISCARD ::QuantEmbeddingLayer* release_trg_embedding();
  ::QuantEmbeddingLayer* mutable_trg_embedding();
  void set_allocated_trg_embedding(::QuantEmbeddingLayer* trg_embedding);
  private:
  const ::QuantEmbeddingLayer& _internal_trg_embedding() const;
  ::QuantEmbeddingLayer* _internal_mutable_trg_embedding();
  public:
  void unsafe_arena_set_allocated_trg_embedding(
      ::QuantEmbeddingLayer* trg_embedding);
  ::QuantEmbeddingLayer* unsafe_arena_release_trg_embedding();

  // .QuantModelConf model_conf = 5;
  bool has_model_conf() const;
  private:
  bool _internal_has_model_conf() const;
  public:
  void clear_model_conf();
  const ::QuantModelConf& model_conf() const;
  PROTOBUF_NODISCARD ::QuantModelConf* release_model_conf();
  ::QuantModelConf* mutable_model_conf();
  void set_allocated_model_conf(::QuantModelConf* model_conf);
  private:
  const ::QuantModelConf& _internal_model_conf() const;
  ::QuantModelConf* _internal_mutable_model_conf();
  public:
  void unsafe_arena_set_allocated_model_conf(
      ::QuantModelConf* model_conf);
  ::QuantModelConf* unsafe_arena_release_model_conf();

  // @@protoc_insertion_point(class_scope:QuantTransformer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QuantEncoderLayer > encoder_stack_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QuantDecoderLayer > decoder_stack_;
    ::QuantEmbeddingLayer* src_embedding_;
    ::QuantEmbeddingLayer* trg_embedding_;
    ::QuantModelConf* model_conf_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_quant_5ftransformer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QuantEncoderLayer

// repeated float multihead_norm_scale = 1;
inline int QuantEncoderLayer::_internal_multihead_norm_scale_size() const {
  return _impl_.multihead_norm_scale_.size();
}
inline int QuantEncoderLayer::multihead_norm_scale_size() const {
  return _internal_multihead_norm_scale_size();
}
inline void QuantEncoderLayer::clear_multihead_norm_scale() {
  _impl_.multihead_norm_scale_.Clear();
}
inline float QuantEncoderLayer::_internal_multihead_norm_scale(int index) const {
  return _impl_.multihead_norm_scale_.Get(index);
}
inline float QuantEncoderLayer::multihead_norm_scale(int index) const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.multihead_norm_scale)
  return _internal_multihead_norm_scale(index);
}
inline void QuantEncoderLayer::set_multihead_norm_scale(int index, float value) {
  _impl_.multihead_norm_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.multihead_norm_scale)
}
inline void QuantEncoderLayer::_internal_add_multihead_norm_scale(float value) {
  _impl_.multihead_norm_scale_.Add(value);
}
inline void QuantEncoderLayer::add_multihead_norm_scale(float value) {
  _internal_add_multihead_norm_scale(value);
  // @@protoc_insertion_point(field_add:QuantEncoderLayer.multihead_norm_scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEncoderLayer::_internal_multihead_norm_scale() const {
  return _impl_.multihead_norm_scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEncoderLayer::multihead_norm_scale() const {
  // @@protoc_insertion_point(field_list:QuantEncoderLayer.multihead_norm_scale)
  return _internal_multihead_norm_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEncoderLayer::_internal_mutable_multihead_norm_scale() {
  return &_impl_.multihead_norm_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEncoderLayer::mutable_multihead_norm_scale() {
  // @@protoc_insertion_point(field_mutable_list:QuantEncoderLayer.multihead_norm_scale)
  return _internal_mutable_multihead_norm_scale();
}

// repeated float multihead_norm_bias = 2;
inline int QuantEncoderLayer::_internal_multihead_norm_bias_size() const {
  return _impl_.multihead_norm_bias_.size();
}
inline int QuantEncoderLayer::multihead_norm_bias_size() const {
  return _internal_multihead_norm_bias_size();
}
inline void QuantEncoderLayer::clear_multihead_norm_bias() {
  _impl_.multihead_norm_bias_.Clear();
}
inline float QuantEncoderLayer::_internal_multihead_norm_bias(int index) const {
  return _impl_.multihead_norm_bias_.Get(index);
}
inline float QuantEncoderLayer::multihead_norm_bias(int index) const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.multihead_norm_bias)
  return _internal_multihead_norm_bias(index);
}
inline void QuantEncoderLayer::set_multihead_norm_bias(int index, float value) {
  _impl_.multihead_norm_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.multihead_norm_bias)
}
inline void QuantEncoderLayer::_internal_add_multihead_norm_bias(float value) {
  _impl_.multihead_norm_bias_.Add(value);
}
inline void QuantEncoderLayer::add_multihead_norm_bias(float value) {
  _internal_add_multihead_norm_bias(value);
  // @@protoc_insertion_point(field_add:QuantEncoderLayer.multihead_norm_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEncoderLayer::_internal_multihead_norm_bias() const {
  return _impl_.multihead_norm_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEncoderLayer::multihead_norm_bias() const {
  // @@protoc_insertion_point(field_list:QuantEncoderLayer.multihead_norm_bias)
  return _internal_multihead_norm_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEncoderLayer::_internal_mutable_multihead_norm_bias() {
  return &_impl_.multihead_norm_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEncoderLayer::mutable_multihead_norm_bias() {
  // @@protoc_insertion_point(field_mutable_list:QuantEncoderLayer.multihead_norm_bias)
  return _internal_mutable_multihead_norm_bias();
}

// bytes multihead_project_kernel_qkv = 3;
inline void QuantEncoderLayer::clear_multihead_project_kernel_qkv() {
  _impl_.multihead_project_kernel_qkv_.ClearToEmpty();
}
inline const std::string& QuantEncoderLayer::multihead_project_kernel_qkv() const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.multihead_project_kernel_qkv)
  return _internal_multihead_project_kernel_qkv();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuantEncoderLayer::set_multihead_project_kernel_qkv(ArgT0&& arg0, ArgT... args) {
 
 _impl_.multihead_project_kernel_qkv_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.multihead_project_kernel_qkv)
}
inline std::string* QuantEncoderLayer::mutable_multihead_project_kernel_qkv() {
  std::string* _s = _internal_mutable_multihead_project_kernel_qkv();
  // @@protoc_insertion_point(field_mutable:QuantEncoderLayer.multihead_project_kernel_qkv)
  return _s;
}
inline const std::string& QuantEncoderLayer::_internal_multihead_project_kernel_qkv() const {
  return _impl_.multihead_project_kernel_qkv_.Get();
}
inline void QuantEncoderLayer::_internal_set_multihead_project_kernel_qkv(const std::string& value) {
  
  _impl_.multihead_project_kernel_qkv_.Set(value, GetArenaForAllocation());
}
inline std::string* QuantEncoderLayer::_internal_mutable_multihead_project_kernel_qkv() {
  
  return _impl_.multihead_project_kernel_qkv_.Mutable(GetArenaForAllocation());
}
inline std::string* QuantEncoderLayer::release_multihead_project_kernel_qkv() {
  // @@protoc_insertion_point(field_release:QuantEncoderLayer.multihead_project_kernel_qkv)
  return _impl_.multihead_project_kernel_qkv_.Release();
}
inline void QuantEncoderLayer::set_allocated_multihead_project_kernel_qkv(std::string* multihead_project_kernel_qkv) {
  if (multihead_project_kernel_qkv != nullptr) {
    
  } else {
    
  }
  _impl_.multihead_project_kernel_qkv_.SetAllocated(multihead_project_kernel_qkv, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.multihead_project_kernel_qkv_.IsDefault()) {
    _impl_.multihead_project_kernel_qkv_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QuantEncoderLayer.multihead_project_kernel_qkv)
}

// repeated float multihead_project_bias_qkv = 4;
inline int QuantEncoderLayer::_internal_multihead_project_bias_qkv_size() const {
  return _impl_.multihead_project_bias_qkv_.size();
}
inline int QuantEncoderLayer::multihead_project_bias_qkv_size() const {
  return _internal_multihead_project_bias_qkv_size();
}
inline void QuantEncoderLayer::clear_multihead_project_bias_qkv() {
  _impl_.multihead_project_bias_qkv_.Clear();
}
inline float QuantEncoderLayer::_internal_multihead_project_bias_qkv(int index) const {
  return _impl_.multihead_project_bias_qkv_.Get(index);
}
inline float QuantEncoderLayer::multihead_project_bias_qkv(int index) const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.multihead_project_bias_qkv)
  return _internal_multihead_project_bias_qkv(index);
}
inline void QuantEncoderLayer::set_multihead_project_bias_qkv(int index, float value) {
  _impl_.multihead_project_bias_qkv_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.multihead_project_bias_qkv)
}
inline void QuantEncoderLayer::_internal_add_multihead_project_bias_qkv(float value) {
  _impl_.multihead_project_bias_qkv_.Add(value);
}
inline void QuantEncoderLayer::add_multihead_project_bias_qkv(float value) {
  _internal_add_multihead_project_bias_qkv(value);
  // @@protoc_insertion_point(field_add:QuantEncoderLayer.multihead_project_bias_qkv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEncoderLayer::_internal_multihead_project_bias_qkv() const {
  return _impl_.multihead_project_bias_qkv_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEncoderLayer::multihead_project_bias_qkv() const {
  // @@protoc_insertion_point(field_list:QuantEncoderLayer.multihead_project_bias_qkv)
  return _internal_multihead_project_bias_qkv();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEncoderLayer::_internal_mutable_multihead_project_bias_qkv() {
  return &_impl_.multihead_project_bias_qkv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEncoderLayer::mutable_multihead_project_bias_qkv() {
  // @@protoc_insertion_point(field_mutable_list:QuantEncoderLayer.multihead_project_bias_qkv)
  return _internal_mutable_multihead_project_bias_qkv();
}

// bytes multihead_project_kernel_output = 5;
inline void QuantEncoderLayer::clear_multihead_project_kernel_output() {
  _impl_.multihead_project_kernel_output_.ClearToEmpty();
}
inline const std::string& QuantEncoderLayer::multihead_project_kernel_output() const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.multihead_project_kernel_output)
  return _internal_multihead_project_kernel_output();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuantEncoderLayer::set_multihead_project_kernel_output(ArgT0&& arg0, ArgT... args) {
 
 _impl_.multihead_project_kernel_output_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.multihead_project_kernel_output)
}
inline std::string* QuantEncoderLayer::mutable_multihead_project_kernel_output() {
  std::string* _s = _internal_mutable_multihead_project_kernel_output();
  // @@protoc_insertion_point(field_mutable:QuantEncoderLayer.multihead_project_kernel_output)
  return _s;
}
inline const std::string& QuantEncoderLayer::_internal_multihead_project_kernel_output() const {
  return _impl_.multihead_project_kernel_output_.Get();
}
inline void QuantEncoderLayer::_internal_set_multihead_project_kernel_output(const std::string& value) {
  
  _impl_.multihead_project_kernel_output_.Set(value, GetArenaForAllocation());
}
inline std::string* QuantEncoderLayer::_internal_mutable_multihead_project_kernel_output() {
  
  return _impl_.multihead_project_kernel_output_.Mutable(GetArenaForAllocation());
}
inline std::string* QuantEncoderLayer::release_multihead_project_kernel_output() {
  // @@protoc_insertion_point(field_release:QuantEncoderLayer.multihead_project_kernel_output)
  return _impl_.multihead_project_kernel_output_.Release();
}
inline void QuantEncoderLayer::set_allocated_multihead_project_kernel_output(std::string* multihead_project_kernel_output) {
  if (multihead_project_kernel_output != nullptr) {
    
  } else {
    
  }
  _impl_.multihead_project_kernel_output_.SetAllocated(multihead_project_kernel_output, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.multihead_project_kernel_output_.IsDefault()) {
    _impl_.multihead_project_kernel_output_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QuantEncoderLayer.multihead_project_kernel_output)
}

// repeated float multihead_project_bias_output = 6;
inline int QuantEncoderLayer::_internal_multihead_project_bias_output_size() const {
  return _impl_.multihead_project_bias_output_.size();
}
inline int QuantEncoderLayer::multihead_project_bias_output_size() const {
  return _internal_multihead_project_bias_output_size();
}
inline void QuantEncoderLayer::clear_multihead_project_bias_output() {
  _impl_.multihead_project_bias_output_.Clear();
}
inline float QuantEncoderLayer::_internal_multihead_project_bias_output(int index) const {
  return _impl_.multihead_project_bias_output_.Get(index);
}
inline float QuantEncoderLayer::multihead_project_bias_output(int index) const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.multihead_project_bias_output)
  return _internal_multihead_project_bias_output(index);
}
inline void QuantEncoderLayer::set_multihead_project_bias_output(int index, float value) {
  _impl_.multihead_project_bias_output_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.multihead_project_bias_output)
}
inline void QuantEncoderLayer::_internal_add_multihead_project_bias_output(float value) {
  _impl_.multihead_project_bias_output_.Add(value);
}
inline void QuantEncoderLayer::add_multihead_project_bias_output(float value) {
  _internal_add_multihead_project_bias_output(value);
  // @@protoc_insertion_point(field_add:QuantEncoderLayer.multihead_project_bias_output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEncoderLayer::_internal_multihead_project_bias_output() const {
  return _impl_.multihead_project_bias_output_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEncoderLayer::multihead_project_bias_output() const {
  // @@protoc_insertion_point(field_list:QuantEncoderLayer.multihead_project_bias_output)
  return _internal_multihead_project_bias_output();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEncoderLayer::_internal_mutable_multihead_project_bias_output() {
  return &_impl_.multihead_project_bias_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEncoderLayer::mutable_multihead_project_bias_output() {
  // @@protoc_insertion_point(field_mutable_list:QuantEncoderLayer.multihead_project_bias_output)
  return _internal_mutable_multihead_project_bias_output();
}

// repeated float ffn_norm_scale = 7;
inline int QuantEncoderLayer::_internal_ffn_norm_scale_size() const {
  return _impl_.ffn_norm_scale_.size();
}
inline int QuantEncoderLayer::ffn_norm_scale_size() const {
  return _internal_ffn_norm_scale_size();
}
inline void QuantEncoderLayer::clear_ffn_norm_scale() {
  _impl_.ffn_norm_scale_.Clear();
}
inline float QuantEncoderLayer::_internal_ffn_norm_scale(int index) const {
  return _impl_.ffn_norm_scale_.Get(index);
}
inline float QuantEncoderLayer::ffn_norm_scale(int index) const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.ffn_norm_scale)
  return _internal_ffn_norm_scale(index);
}
inline void QuantEncoderLayer::set_ffn_norm_scale(int index, float value) {
  _impl_.ffn_norm_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.ffn_norm_scale)
}
inline void QuantEncoderLayer::_internal_add_ffn_norm_scale(float value) {
  _impl_.ffn_norm_scale_.Add(value);
}
inline void QuantEncoderLayer::add_ffn_norm_scale(float value) {
  _internal_add_ffn_norm_scale(value);
  // @@protoc_insertion_point(field_add:QuantEncoderLayer.ffn_norm_scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEncoderLayer::_internal_ffn_norm_scale() const {
  return _impl_.ffn_norm_scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEncoderLayer::ffn_norm_scale() const {
  // @@protoc_insertion_point(field_list:QuantEncoderLayer.ffn_norm_scale)
  return _internal_ffn_norm_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEncoderLayer::_internal_mutable_ffn_norm_scale() {
  return &_impl_.ffn_norm_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEncoderLayer::mutable_ffn_norm_scale() {
  // @@protoc_insertion_point(field_mutable_list:QuantEncoderLayer.ffn_norm_scale)
  return _internal_mutable_ffn_norm_scale();
}

// repeated float ffn_norm_bias = 8;
inline int QuantEncoderLayer::_internal_ffn_norm_bias_size() const {
  return _impl_.ffn_norm_bias_.size();
}
inline int QuantEncoderLayer::ffn_norm_bias_size() const {
  return _internal_ffn_norm_bias_size();
}
inline void QuantEncoderLayer::clear_ffn_norm_bias() {
  _impl_.ffn_norm_bias_.Clear();
}
inline float QuantEncoderLayer::_internal_ffn_norm_bias(int index) const {
  return _impl_.ffn_norm_bias_.Get(index);
}
inline float QuantEncoderLayer::ffn_norm_bias(int index) const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.ffn_norm_bias)
  return _internal_ffn_norm_bias(index);
}
inline void QuantEncoderLayer::set_ffn_norm_bias(int index, float value) {
  _impl_.ffn_norm_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.ffn_norm_bias)
}
inline void QuantEncoderLayer::_internal_add_ffn_norm_bias(float value) {
  _impl_.ffn_norm_bias_.Add(value);
}
inline void QuantEncoderLayer::add_ffn_norm_bias(float value) {
  _internal_add_ffn_norm_bias(value);
  // @@protoc_insertion_point(field_add:QuantEncoderLayer.ffn_norm_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEncoderLayer::_internal_ffn_norm_bias() const {
  return _impl_.ffn_norm_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEncoderLayer::ffn_norm_bias() const {
  // @@protoc_insertion_point(field_list:QuantEncoderLayer.ffn_norm_bias)
  return _internal_ffn_norm_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEncoderLayer::_internal_mutable_ffn_norm_bias() {
  return &_impl_.ffn_norm_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEncoderLayer::mutable_ffn_norm_bias() {
  // @@protoc_insertion_point(field_mutable_list:QuantEncoderLayer.ffn_norm_bias)
  return _internal_mutable_ffn_norm_bias();
}

// bytes ffn_first_kernel = 9;
inline void QuantEncoderLayer::clear_ffn_first_kernel() {
  _impl_.ffn_first_kernel_.ClearToEmpty();
}
inline const std::string& QuantEncoderLayer::ffn_first_kernel() const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.ffn_first_kernel)
  return _internal_ffn_first_kernel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuantEncoderLayer::set_ffn_first_kernel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ffn_first_kernel_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.ffn_first_kernel)
}
inline std::string* QuantEncoderLayer::mutable_ffn_first_kernel() {
  std::string* _s = _internal_mutable_ffn_first_kernel();
  // @@protoc_insertion_point(field_mutable:QuantEncoderLayer.ffn_first_kernel)
  return _s;
}
inline const std::string& QuantEncoderLayer::_internal_ffn_first_kernel() const {
  return _impl_.ffn_first_kernel_.Get();
}
inline void QuantEncoderLayer::_internal_set_ffn_first_kernel(const std::string& value) {
  
  _impl_.ffn_first_kernel_.Set(value, GetArenaForAllocation());
}
inline std::string* QuantEncoderLayer::_internal_mutable_ffn_first_kernel() {
  
  return _impl_.ffn_first_kernel_.Mutable(GetArenaForAllocation());
}
inline std::string* QuantEncoderLayer::release_ffn_first_kernel() {
  // @@protoc_insertion_point(field_release:QuantEncoderLayer.ffn_first_kernel)
  return _impl_.ffn_first_kernel_.Release();
}
inline void QuantEncoderLayer::set_allocated_ffn_first_kernel(std::string* ffn_first_kernel) {
  if (ffn_first_kernel != nullptr) {
    
  } else {
    
  }
  _impl_.ffn_first_kernel_.SetAllocated(ffn_first_kernel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ffn_first_kernel_.IsDefault()) {
    _impl_.ffn_first_kernel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QuantEncoderLayer.ffn_first_kernel)
}

// repeated float ffn_first_bias = 10;
inline int QuantEncoderLayer::_internal_ffn_first_bias_size() const {
  return _impl_.ffn_first_bias_.size();
}
inline int QuantEncoderLayer::ffn_first_bias_size() const {
  return _internal_ffn_first_bias_size();
}
inline void QuantEncoderLayer::clear_ffn_first_bias() {
  _impl_.ffn_first_bias_.Clear();
}
inline float QuantEncoderLayer::_internal_ffn_first_bias(int index) const {
  return _impl_.ffn_first_bias_.Get(index);
}
inline float QuantEncoderLayer::ffn_first_bias(int index) const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.ffn_first_bias)
  return _internal_ffn_first_bias(index);
}
inline void QuantEncoderLayer::set_ffn_first_bias(int index, float value) {
  _impl_.ffn_first_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.ffn_first_bias)
}
inline void QuantEncoderLayer::_internal_add_ffn_first_bias(float value) {
  _impl_.ffn_first_bias_.Add(value);
}
inline void QuantEncoderLayer::add_ffn_first_bias(float value) {
  _internal_add_ffn_first_bias(value);
  // @@protoc_insertion_point(field_add:QuantEncoderLayer.ffn_first_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEncoderLayer::_internal_ffn_first_bias() const {
  return _impl_.ffn_first_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEncoderLayer::ffn_first_bias() const {
  // @@protoc_insertion_point(field_list:QuantEncoderLayer.ffn_first_bias)
  return _internal_ffn_first_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEncoderLayer::_internal_mutable_ffn_first_bias() {
  return &_impl_.ffn_first_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEncoderLayer::mutable_ffn_first_bias() {
  // @@protoc_insertion_point(field_mutable_list:QuantEncoderLayer.ffn_first_bias)
  return _internal_mutable_ffn_first_bias();
}

// bytes ffn_second_kernel = 11;
inline void QuantEncoderLayer::clear_ffn_second_kernel() {
  _impl_.ffn_second_kernel_.ClearToEmpty();
}
inline const std::string& QuantEncoderLayer::ffn_second_kernel() const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.ffn_second_kernel)
  return _internal_ffn_second_kernel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuantEncoderLayer::set_ffn_second_kernel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ffn_second_kernel_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.ffn_second_kernel)
}
inline std::string* QuantEncoderLayer::mutable_ffn_second_kernel() {
  std::string* _s = _internal_mutable_ffn_second_kernel();
  // @@protoc_insertion_point(field_mutable:QuantEncoderLayer.ffn_second_kernel)
  return _s;
}
inline const std::string& QuantEncoderLayer::_internal_ffn_second_kernel() const {
  return _impl_.ffn_second_kernel_.Get();
}
inline void QuantEncoderLayer::_internal_set_ffn_second_kernel(const std::string& value) {
  
  _impl_.ffn_second_kernel_.Set(value, GetArenaForAllocation());
}
inline std::string* QuantEncoderLayer::_internal_mutable_ffn_second_kernel() {
  
  return _impl_.ffn_second_kernel_.Mutable(GetArenaForAllocation());
}
inline std::string* QuantEncoderLayer::release_ffn_second_kernel() {
  // @@protoc_insertion_point(field_release:QuantEncoderLayer.ffn_second_kernel)
  return _impl_.ffn_second_kernel_.Release();
}
inline void QuantEncoderLayer::set_allocated_ffn_second_kernel(std::string* ffn_second_kernel) {
  if (ffn_second_kernel != nullptr) {
    
  } else {
    
  }
  _impl_.ffn_second_kernel_.SetAllocated(ffn_second_kernel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ffn_second_kernel_.IsDefault()) {
    _impl_.ffn_second_kernel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QuantEncoderLayer.ffn_second_kernel)
}

// repeated float ffn_second_bias = 12;
inline int QuantEncoderLayer::_internal_ffn_second_bias_size() const {
  return _impl_.ffn_second_bias_.size();
}
inline int QuantEncoderLayer::ffn_second_bias_size() const {
  return _internal_ffn_second_bias_size();
}
inline void QuantEncoderLayer::clear_ffn_second_bias() {
  _impl_.ffn_second_bias_.Clear();
}
inline float QuantEncoderLayer::_internal_ffn_second_bias(int index) const {
  return _impl_.ffn_second_bias_.Get(index);
}
inline float QuantEncoderLayer::ffn_second_bias(int index) const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.ffn_second_bias)
  return _internal_ffn_second_bias(index);
}
inline void QuantEncoderLayer::set_ffn_second_bias(int index, float value) {
  _impl_.ffn_second_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.ffn_second_bias)
}
inline void QuantEncoderLayer::_internal_add_ffn_second_bias(float value) {
  _impl_.ffn_second_bias_.Add(value);
}
inline void QuantEncoderLayer::add_ffn_second_bias(float value) {
  _internal_add_ffn_second_bias(value);
  // @@protoc_insertion_point(field_add:QuantEncoderLayer.ffn_second_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEncoderLayer::_internal_ffn_second_bias() const {
  return _impl_.ffn_second_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEncoderLayer::ffn_second_bias() const {
  // @@protoc_insertion_point(field_list:QuantEncoderLayer.ffn_second_bias)
  return _internal_ffn_second_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEncoderLayer::_internal_mutable_ffn_second_bias() {
  return &_impl_.ffn_second_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEncoderLayer::mutable_ffn_second_bias() {
  // @@protoc_insertion_point(field_mutable_list:QuantEncoderLayer.ffn_second_bias)
  return _internal_mutable_ffn_second_bias();
}

// float multihead_project_kernel_qkv_clip_max = 13;
inline void QuantEncoderLayer::clear_multihead_project_kernel_qkv_clip_max() {
  _impl_.multihead_project_kernel_qkv_clip_max_ = 0;
}
inline float QuantEncoderLayer::_internal_multihead_project_kernel_qkv_clip_max() const {
  return _impl_.multihead_project_kernel_qkv_clip_max_;
}
inline float QuantEncoderLayer::multihead_project_kernel_qkv_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.multihead_project_kernel_qkv_clip_max)
  return _internal_multihead_project_kernel_qkv_clip_max();
}
inline void QuantEncoderLayer::_internal_set_multihead_project_kernel_qkv_clip_max(float value) {
  
  _impl_.multihead_project_kernel_qkv_clip_max_ = value;
}
inline void QuantEncoderLayer::set_multihead_project_kernel_qkv_clip_max(float value) {
  _internal_set_multihead_project_kernel_qkv_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.multihead_project_kernel_qkv_clip_max)
}

// float multihead_project_kernel_output_clip_max = 14;
inline void QuantEncoderLayer::clear_multihead_project_kernel_output_clip_max() {
  _impl_.multihead_project_kernel_output_clip_max_ = 0;
}
inline float QuantEncoderLayer::_internal_multihead_project_kernel_output_clip_max() const {
  return _impl_.multihead_project_kernel_output_clip_max_;
}
inline float QuantEncoderLayer::multihead_project_kernel_output_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.multihead_project_kernel_output_clip_max)
  return _internal_multihead_project_kernel_output_clip_max();
}
inline void QuantEncoderLayer::_internal_set_multihead_project_kernel_output_clip_max(float value) {
  
  _impl_.multihead_project_kernel_output_clip_max_ = value;
}
inline void QuantEncoderLayer::set_multihead_project_kernel_output_clip_max(float value) {
  _internal_set_multihead_project_kernel_output_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.multihead_project_kernel_output_clip_max)
}

// float ffn_first_kernel_clip_max = 15;
inline void QuantEncoderLayer::clear_ffn_first_kernel_clip_max() {
  _impl_.ffn_first_kernel_clip_max_ = 0;
}
inline float QuantEncoderLayer::_internal_ffn_first_kernel_clip_max() const {
  return _impl_.ffn_first_kernel_clip_max_;
}
inline float QuantEncoderLayer::ffn_first_kernel_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.ffn_first_kernel_clip_max)
  return _internal_ffn_first_kernel_clip_max();
}
inline void QuantEncoderLayer::_internal_set_ffn_first_kernel_clip_max(float value) {
  
  _impl_.ffn_first_kernel_clip_max_ = value;
}
inline void QuantEncoderLayer::set_ffn_first_kernel_clip_max(float value) {
  _internal_set_ffn_first_kernel_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.ffn_first_kernel_clip_max)
}

// float ffn_second_kernel_clip_max = 16;
inline void QuantEncoderLayer::clear_ffn_second_kernel_clip_max() {
  _impl_.ffn_second_kernel_clip_max_ = 0;
}
inline float QuantEncoderLayer::_internal_ffn_second_kernel_clip_max() const {
  return _impl_.ffn_second_kernel_clip_max_;
}
inline float QuantEncoderLayer::ffn_second_kernel_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.ffn_second_kernel_clip_max)
  return _internal_ffn_second_kernel_clip_max();
}
inline void QuantEncoderLayer::_internal_set_ffn_second_kernel_clip_max(float value) {
  
  _impl_.ffn_second_kernel_clip_max_ = value;
}
inline void QuantEncoderLayer::set_ffn_second_kernel_clip_max(float value) {
  _internal_set_ffn_second_kernel_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.ffn_second_kernel_clip_max)
}

// float multihead_ln_clip_max = 17;
inline void QuantEncoderLayer::clear_multihead_ln_clip_max() {
  _impl_.multihead_ln_clip_max_ = 0;
}
inline float QuantEncoderLayer::_internal_multihead_ln_clip_max() const {
  return _impl_.multihead_ln_clip_max_;
}
inline float QuantEncoderLayer::multihead_ln_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.multihead_ln_clip_max)
  return _internal_multihead_ln_clip_max();
}
inline void QuantEncoderLayer::_internal_set_multihead_ln_clip_max(float value) {
  
  _impl_.multihead_ln_clip_max_ = value;
}
inline void QuantEncoderLayer::set_multihead_ln_clip_max(float value) {
  _internal_set_multihead_ln_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.multihead_ln_clip_max)
}

// float multihead_project_output_clip_max = 18;
inline void QuantEncoderLayer::clear_multihead_project_output_clip_max() {
  _impl_.multihead_project_output_clip_max_ = 0;
}
inline float QuantEncoderLayer::_internal_multihead_project_output_clip_max() const {
  return _impl_.multihead_project_output_clip_max_;
}
inline float QuantEncoderLayer::multihead_project_output_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.multihead_project_output_clip_max)
  return _internal_multihead_project_output_clip_max();
}
inline void QuantEncoderLayer::_internal_set_multihead_project_output_clip_max(float value) {
  
  _impl_.multihead_project_output_clip_max_ = value;
}
inline void QuantEncoderLayer::set_multihead_project_output_clip_max(float value) {
  _internal_set_multihead_project_output_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.multihead_project_output_clip_max)
}

// float ffn_ln_clip_max = 19;
inline void QuantEncoderLayer::clear_ffn_ln_clip_max() {
  _impl_.ffn_ln_clip_max_ = 0;
}
inline float QuantEncoderLayer::_internal_ffn_ln_clip_max() const {
  return _impl_.ffn_ln_clip_max_;
}
inline float QuantEncoderLayer::ffn_ln_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.ffn_ln_clip_max)
  return _internal_ffn_ln_clip_max();
}
inline void QuantEncoderLayer::_internal_set_ffn_ln_clip_max(float value) {
  
  _impl_.ffn_ln_clip_max_ = value;
}
inline void QuantEncoderLayer::set_ffn_ln_clip_max(float value) {
  _internal_set_ffn_ln_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.ffn_ln_clip_max)
}

// float ffn_first_act_clip_max = 20;
inline void QuantEncoderLayer::clear_ffn_first_act_clip_max() {
  _impl_.ffn_first_act_clip_max_ = 0;
}
inline float QuantEncoderLayer::_internal_ffn_first_act_clip_max() const {
  return _impl_.ffn_first_act_clip_max_;
}
inline float QuantEncoderLayer::ffn_first_act_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.ffn_first_act_clip_max)
  return _internal_ffn_first_act_clip_max();
}
inline void QuantEncoderLayer::_internal_set_ffn_first_act_clip_max(float value) {
  
  _impl_.ffn_first_act_clip_max_ = value;
}
inline void QuantEncoderLayer::set_ffn_first_act_clip_max(float value) {
  _internal_set_ffn_first_act_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.ffn_first_act_clip_max)
}

// float multihead_qkv_dense_clip_max = 21;
inline void QuantEncoderLayer::clear_multihead_qkv_dense_clip_max() {
  _impl_.multihead_qkv_dense_clip_max_ = 0;
}
inline float QuantEncoderLayer::_internal_multihead_qkv_dense_clip_max() const {
  return _impl_.multihead_qkv_dense_clip_max_;
}
inline float QuantEncoderLayer::multihead_qkv_dense_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.multihead_qkv_dense_clip_max)
  return _internal_multihead_qkv_dense_clip_max();
}
inline void QuantEncoderLayer::_internal_set_multihead_qkv_dense_clip_max(float value) {
  
  _impl_.multihead_qkv_dense_clip_max_ = value;
}
inline void QuantEncoderLayer::set_multihead_qkv_dense_clip_max(float value) {
  _internal_set_multihead_qkv_dense_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.multihead_qkv_dense_clip_max)
}

// float multihead_output_dense_clip_max = 22;
inline void QuantEncoderLayer::clear_multihead_output_dense_clip_max() {
  _impl_.multihead_output_dense_clip_max_ = 0;
}
inline float QuantEncoderLayer::_internal_multihead_output_dense_clip_max() const {
  return _impl_.multihead_output_dense_clip_max_;
}
inline float QuantEncoderLayer::multihead_output_dense_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.multihead_output_dense_clip_max)
  return _internal_multihead_output_dense_clip_max();
}
inline void QuantEncoderLayer::_internal_set_multihead_output_dense_clip_max(float value) {
  
  _impl_.multihead_output_dense_clip_max_ = value;
}
inline void QuantEncoderLayer::set_multihead_output_dense_clip_max(float value) {
  _internal_set_multihead_output_dense_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.multihead_output_dense_clip_max)
}

// float ffn_first_output_clip_max = 23;
inline void QuantEncoderLayer::clear_ffn_first_output_clip_max() {
  _impl_.ffn_first_output_clip_max_ = 0;
}
inline float QuantEncoderLayer::_internal_ffn_first_output_clip_max() const {
  return _impl_.ffn_first_output_clip_max_;
}
inline float QuantEncoderLayer::ffn_first_output_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.ffn_first_output_clip_max)
  return _internal_ffn_first_output_clip_max();
}
inline void QuantEncoderLayer::_internal_set_ffn_first_output_clip_max(float value) {
  
  _impl_.ffn_first_output_clip_max_ = value;
}
inline void QuantEncoderLayer::set_ffn_first_output_clip_max(float value) {
  _internal_set_ffn_first_output_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.ffn_first_output_clip_max)
}

// float ffn_second_output_clip_max = 24;
inline void QuantEncoderLayer::clear_ffn_second_output_clip_max() {
  _impl_.ffn_second_output_clip_max_ = 0;
}
inline float QuantEncoderLayer::_internal_ffn_second_output_clip_max() const {
  return _impl_.ffn_second_output_clip_max_;
}
inline float QuantEncoderLayer::ffn_second_output_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantEncoderLayer.ffn_second_output_clip_max)
  return _internal_ffn_second_output_clip_max();
}
inline void QuantEncoderLayer::_internal_set_ffn_second_output_clip_max(float value) {
  
  _impl_.ffn_second_output_clip_max_ = value;
}
inline void QuantEncoderLayer::set_ffn_second_output_clip_max(float value) {
  _internal_set_ffn_second_output_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantEncoderLayer.ffn_second_output_clip_max)
}

// -------------------------------------------------------------------

// QuantDecoderLayer

// repeated float self_norm_scale = 1;
inline int QuantDecoderLayer::_internal_self_norm_scale_size() const {
  return _impl_.self_norm_scale_.size();
}
inline int QuantDecoderLayer::self_norm_scale_size() const {
  return _internal_self_norm_scale_size();
}
inline void QuantDecoderLayer::clear_self_norm_scale() {
  _impl_.self_norm_scale_.Clear();
}
inline float QuantDecoderLayer::_internal_self_norm_scale(int index) const {
  return _impl_.self_norm_scale_.Get(index);
}
inline float QuantDecoderLayer::self_norm_scale(int index) const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.self_norm_scale)
  return _internal_self_norm_scale(index);
}
inline void QuantDecoderLayer::set_self_norm_scale(int index, float value) {
  _impl_.self_norm_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.self_norm_scale)
}
inline void QuantDecoderLayer::_internal_add_self_norm_scale(float value) {
  _impl_.self_norm_scale_.Add(value);
}
inline void QuantDecoderLayer::add_self_norm_scale(float value) {
  _internal_add_self_norm_scale(value);
  // @@protoc_insertion_point(field_add:QuantDecoderLayer.self_norm_scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::_internal_self_norm_scale() const {
  return _impl_.self_norm_scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::self_norm_scale() const {
  // @@protoc_insertion_point(field_list:QuantDecoderLayer.self_norm_scale)
  return _internal_self_norm_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::_internal_mutable_self_norm_scale() {
  return &_impl_.self_norm_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::mutable_self_norm_scale() {
  // @@protoc_insertion_point(field_mutable_list:QuantDecoderLayer.self_norm_scale)
  return _internal_mutable_self_norm_scale();
}

// repeated float self_norm_bias = 2;
inline int QuantDecoderLayer::_internal_self_norm_bias_size() const {
  return _impl_.self_norm_bias_.size();
}
inline int QuantDecoderLayer::self_norm_bias_size() const {
  return _internal_self_norm_bias_size();
}
inline void QuantDecoderLayer::clear_self_norm_bias() {
  _impl_.self_norm_bias_.Clear();
}
inline float QuantDecoderLayer::_internal_self_norm_bias(int index) const {
  return _impl_.self_norm_bias_.Get(index);
}
inline float QuantDecoderLayer::self_norm_bias(int index) const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.self_norm_bias)
  return _internal_self_norm_bias(index);
}
inline void QuantDecoderLayer::set_self_norm_bias(int index, float value) {
  _impl_.self_norm_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.self_norm_bias)
}
inline void QuantDecoderLayer::_internal_add_self_norm_bias(float value) {
  _impl_.self_norm_bias_.Add(value);
}
inline void QuantDecoderLayer::add_self_norm_bias(float value) {
  _internal_add_self_norm_bias(value);
  // @@protoc_insertion_point(field_add:QuantDecoderLayer.self_norm_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::_internal_self_norm_bias() const {
  return _impl_.self_norm_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::self_norm_bias() const {
  // @@protoc_insertion_point(field_list:QuantDecoderLayer.self_norm_bias)
  return _internal_self_norm_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::_internal_mutable_self_norm_bias() {
  return &_impl_.self_norm_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::mutable_self_norm_bias() {
  // @@protoc_insertion_point(field_mutable_list:QuantDecoderLayer.self_norm_bias)
  return _internal_mutable_self_norm_bias();
}

// bytes self_project_kernel_qkv = 3;
inline void QuantDecoderLayer::clear_self_project_kernel_qkv() {
  _impl_.self_project_kernel_qkv_.ClearToEmpty();
}
inline const std::string& QuantDecoderLayer::self_project_kernel_qkv() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.self_project_kernel_qkv)
  return _internal_self_project_kernel_qkv();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuantDecoderLayer::set_self_project_kernel_qkv(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_project_kernel_qkv_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.self_project_kernel_qkv)
}
inline std::string* QuantDecoderLayer::mutable_self_project_kernel_qkv() {
  std::string* _s = _internal_mutable_self_project_kernel_qkv();
  // @@protoc_insertion_point(field_mutable:QuantDecoderLayer.self_project_kernel_qkv)
  return _s;
}
inline const std::string& QuantDecoderLayer::_internal_self_project_kernel_qkv() const {
  return _impl_.self_project_kernel_qkv_.Get();
}
inline void QuantDecoderLayer::_internal_set_self_project_kernel_qkv(const std::string& value) {
  
  _impl_.self_project_kernel_qkv_.Set(value, GetArenaForAllocation());
}
inline std::string* QuantDecoderLayer::_internal_mutable_self_project_kernel_qkv() {
  
  return _impl_.self_project_kernel_qkv_.Mutable(GetArenaForAllocation());
}
inline std::string* QuantDecoderLayer::release_self_project_kernel_qkv() {
  // @@protoc_insertion_point(field_release:QuantDecoderLayer.self_project_kernel_qkv)
  return _impl_.self_project_kernel_qkv_.Release();
}
inline void QuantDecoderLayer::set_allocated_self_project_kernel_qkv(std::string* self_project_kernel_qkv) {
  if (self_project_kernel_qkv != nullptr) {
    
  } else {
    
  }
  _impl_.self_project_kernel_qkv_.SetAllocated(self_project_kernel_qkv, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_project_kernel_qkv_.IsDefault()) {
    _impl_.self_project_kernel_qkv_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QuantDecoderLayer.self_project_kernel_qkv)
}

// repeated float self_project_bias_qkv = 4;
inline int QuantDecoderLayer::_internal_self_project_bias_qkv_size() const {
  return _impl_.self_project_bias_qkv_.size();
}
inline int QuantDecoderLayer::self_project_bias_qkv_size() const {
  return _internal_self_project_bias_qkv_size();
}
inline void QuantDecoderLayer::clear_self_project_bias_qkv() {
  _impl_.self_project_bias_qkv_.Clear();
}
inline float QuantDecoderLayer::_internal_self_project_bias_qkv(int index) const {
  return _impl_.self_project_bias_qkv_.Get(index);
}
inline float QuantDecoderLayer::self_project_bias_qkv(int index) const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.self_project_bias_qkv)
  return _internal_self_project_bias_qkv(index);
}
inline void QuantDecoderLayer::set_self_project_bias_qkv(int index, float value) {
  _impl_.self_project_bias_qkv_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.self_project_bias_qkv)
}
inline void QuantDecoderLayer::_internal_add_self_project_bias_qkv(float value) {
  _impl_.self_project_bias_qkv_.Add(value);
}
inline void QuantDecoderLayer::add_self_project_bias_qkv(float value) {
  _internal_add_self_project_bias_qkv(value);
  // @@protoc_insertion_point(field_add:QuantDecoderLayer.self_project_bias_qkv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::_internal_self_project_bias_qkv() const {
  return _impl_.self_project_bias_qkv_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::self_project_bias_qkv() const {
  // @@protoc_insertion_point(field_list:QuantDecoderLayer.self_project_bias_qkv)
  return _internal_self_project_bias_qkv();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::_internal_mutable_self_project_bias_qkv() {
  return &_impl_.self_project_bias_qkv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::mutable_self_project_bias_qkv() {
  // @@protoc_insertion_point(field_mutable_list:QuantDecoderLayer.self_project_bias_qkv)
  return _internal_mutable_self_project_bias_qkv();
}

// bytes self_project_kernel_output = 5;
inline void QuantDecoderLayer::clear_self_project_kernel_output() {
  _impl_.self_project_kernel_output_.ClearToEmpty();
}
inline const std::string& QuantDecoderLayer::self_project_kernel_output() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.self_project_kernel_output)
  return _internal_self_project_kernel_output();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuantDecoderLayer::set_self_project_kernel_output(ArgT0&& arg0, ArgT... args) {
 
 _impl_.self_project_kernel_output_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.self_project_kernel_output)
}
inline std::string* QuantDecoderLayer::mutable_self_project_kernel_output() {
  std::string* _s = _internal_mutable_self_project_kernel_output();
  // @@protoc_insertion_point(field_mutable:QuantDecoderLayer.self_project_kernel_output)
  return _s;
}
inline const std::string& QuantDecoderLayer::_internal_self_project_kernel_output() const {
  return _impl_.self_project_kernel_output_.Get();
}
inline void QuantDecoderLayer::_internal_set_self_project_kernel_output(const std::string& value) {
  
  _impl_.self_project_kernel_output_.Set(value, GetArenaForAllocation());
}
inline std::string* QuantDecoderLayer::_internal_mutable_self_project_kernel_output() {
  
  return _impl_.self_project_kernel_output_.Mutable(GetArenaForAllocation());
}
inline std::string* QuantDecoderLayer::release_self_project_kernel_output() {
  // @@protoc_insertion_point(field_release:QuantDecoderLayer.self_project_kernel_output)
  return _impl_.self_project_kernel_output_.Release();
}
inline void QuantDecoderLayer::set_allocated_self_project_kernel_output(std::string* self_project_kernel_output) {
  if (self_project_kernel_output != nullptr) {
    
  } else {
    
  }
  _impl_.self_project_kernel_output_.SetAllocated(self_project_kernel_output, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.self_project_kernel_output_.IsDefault()) {
    _impl_.self_project_kernel_output_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QuantDecoderLayer.self_project_kernel_output)
}

// repeated float self_project_bias_output = 6;
inline int QuantDecoderLayer::_internal_self_project_bias_output_size() const {
  return _impl_.self_project_bias_output_.size();
}
inline int QuantDecoderLayer::self_project_bias_output_size() const {
  return _internal_self_project_bias_output_size();
}
inline void QuantDecoderLayer::clear_self_project_bias_output() {
  _impl_.self_project_bias_output_.Clear();
}
inline float QuantDecoderLayer::_internal_self_project_bias_output(int index) const {
  return _impl_.self_project_bias_output_.Get(index);
}
inline float QuantDecoderLayer::self_project_bias_output(int index) const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.self_project_bias_output)
  return _internal_self_project_bias_output(index);
}
inline void QuantDecoderLayer::set_self_project_bias_output(int index, float value) {
  _impl_.self_project_bias_output_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.self_project_bias_output)
}
inline void QuantDecoderLayer::_internal_add_self_project_bias_output(float value) {
  _impl_.self_project_bias_output_.Add(value);
}
inline void QuantDecoderLayer::add_self_project_bias_output(float value) {
  _internal_add_self_project_bias_output(value);
  // @@protoc_insertion_point(field_add:QuantDecoderLayer.self_project_bias_output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::_internal_self_project_bias_output() const {
  return _impl_.self_project_bias_output_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::self_project_bias_output() const {
  // @@protoc_insertion_point(field_list:QuantDecoderLayer.self_project_bias_output)
  return _internal_self_project_bias_output();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::_internal_mutable_self_project_bias_output() {
  return &_impl_.self_project_bias_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::mutable_self_project_bias_output() {
  // @@protoc_insertion_point(field_mutable_list:QuantDecoderLayer.self_project_bias_output)
  return _internal_mutable_self_project_bias_output();
}

// repeated float encdec_norm_scale = 7;
inline int QuantDecoderLayer::_internal_encdec_norm_scale_size() const {
  return _impl_.encdec_norm_scale_.size();
}
inline int QuantDecoderLayer::encdec_norm_scale_size() const {
  return _internal_encdec_norm_scale_size();
}
inline void QuantDecoderLayer::clear_encdec_norm_scale() {
  _impl_.encdec_norm_scale_.Clear();
}
inline float QuantDecoderLayer::_internal_encdec_norm_scale(int index) const {
  return _impl_.encdec_norm_scale_.Get(index);
}
inline float QuantDecoderLayer::encdec_norm_scale(int index) const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.encdec_norm_scale)
  return _internal_encdec_norm_scale(index);
}
inline void QuantDecoderLayer::set_encdec_norm_scale(int index, float value) {
  _impl_.encdec_norm_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.encdec_norm_scale)
}
inline void QuantDecoderLayer::_internal_add_encdec_norm_scale(float value) {
  _impl_.encdec_norm_scale_.Add(value);
}
inline void QuantDecoderLayer::add_encdec_norm_scale(float value) {
  _internal_add_encdec_norm_scale(value);
  // @@protoc_insertion_point(field_add:QuantDecoderLayer.encdec_norm_scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::_internal_encdec_norm_scale() const {
  return _impl_.encdec_norm_scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::encdec_norm_scale() const {
  // @@protoc_insertion_point(field_list:QuantDecoderLayer.encdec_norm_scale)
  return _internal_encdec_norm_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::_internal_mutable_encdec_norm_scale() {
  return &_impl_.encdec_norm_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::mutable_encdec_norm_scale() {
  // @@protoc_insertion_point(field_mutable_list:QuantDecoderLayer.encdec_norm_scale)
  return _internal_mutable_encdec_norm_scale();
}

// repeated float encdec_norm_bias = 8;
inline int QuantDecoderLayer::_internal_encdec_norm_bias_size() const {
  return _impl_.encdec_norm_bias_.size();
}
inline int QuantDecoderLayer::encdec_norm_bias_size() const {
  return _internal_encdec_norm_bias_size();
}
inline void QuantDecoderLayer::clear_encdec_norm_bias() {
  _impl_.encdec_norm_bias_.Clear();
}
inline float QuantDecoderLayer::_internal_encdec_norm_bias(int index) const {
  return _impl_.encdec_norm_bias_.Get(index);
}
inline float QuantDecoderLayer::encdec_norm_bias(int index) const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.encdec_norm_bias)
  return _internal_encdec_norm_bias(index);
}
inline void QuantDecoderLayer::set_encdec_norm_bias(int index, float value) {
  _impl_.encdec_norm_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.encdec_norm_bias)
}
inline void QuantDecoderLayer::_internal_add_encdec_norm_bias(float value) {
  _impl_.encdec_norm_bias_.Add(value);
}
inline void QuantDecoderLayer::add_encdec_norm_bias(float value) {
  _internal_add_encdec_norm_bias(value);
  // @@protoc_insertion_point(field_add:QuantDecoderLayer.encdec_norm_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::_internal_encdec_norm_bias() const {
  return _impl_.encdec_norm_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::encdec_norm_bias() const {
  // @@protoc_insertion_point(field_list:QuantDecoderLayer.encdec_norm_bias)
  return _internal_encdec_norm_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::_internal_mutable_encdec_norm_bias() {
  return &_impl_.encdec_norm_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::mutable_encdec_norm_bias() {
  // @@protoc_insertion_point(field_mutable_list:QuantDecoderLayer.encdec_norm_bias)
  return _internal_mutable_encdec_norm_bias();
}

// bytes encdec_project_kernel_q = 9;
inline void QuantDecoderLayer::clear_encdec_project_kernel_q() {
  _impl_.encdec_project_kernel_q_.ClearToEmpty();
}
inline const std::string& QuantDecoderLayer::encdec_project_kernel_q() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.encdec_project_kernel_q)
  return _internal_encdec_project_kernel_q();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuantDecoderLayer::set_encdec_project_kernel_q(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encdec_project_kernel_q_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.encdec_project_kernel_q)
}
inline std::string* QuantDecoderLayer::mutable_encdec_project_kernel_q() {
  std::string* _s = _internal_mutable_encdec_project_kernel_q();
  // @@protoc_insertion_point(field_mutable:QuantDecoderLayer.encdec_project_kernel_q)
  return _s;
}
inline const std::string& QuantDecoderLayer::_internal_encdec_project_kernel_q() const {
  return _impl_.encdec_project_kernel_q_.Get();
}
inline void QuantDecoderLayer::_internal_set_encdec_project_kernel_q(const std::string& value) {
  
  _impl_.encdec_project_kernel_q_.Set(value, GetArenaForAllocation());
}
inline std::string* QuantDecoderLayer::_internal_mutable_encdec_project_kernel_q() {
  
  return _impl_.encdec_project_kernel_q_.Mutable(GetArenaForAllocation());
}
inline std::string* QuantDecoderLayer::release_encdec_project_kernel_q() {
  // @@protoc_insertion_point(field_release:QuantDecoderLayer.encdec_project_kernel_q)
  return _impl_.encdec_project_kernel_q_.Release();
}
inline void QuantDecoderLayer::set_allocated_encdec_project_kernel_q(std::string* encdec_project_kernel_q) {
  if (encdec_project_kernel_q != nullptr) {
    
  } else {
    
  }
  _impl_.encdec_project_kernel_q_.SetAllocated(encdec_project_kernel_q, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encdec_project_kernel_q_.IsDefault()) {
    _impl_.encdec_project_kernel_q_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QuantDecoderLayer.encdec_project_kernel_q)
}

// repeated float encdec_project_bias_q = 10;
inline int QuantDecoderLayer::_internal_encdec_project_bias_q_size() const {
  return _impl_.encdec_project_bias_q_.size();
}
inline int QuantDecoderLayer::encdec_project_bias_q_size() const {
  return _internal_encdec_project_bias_q_size();
}
inline void QuantDecoderLayer::clear_encdec_project_bias_q() {
  _impl_.encdec_project_bias_q_.Clear();
}
inline float QuantDecoderLayer::_internal_encdec_project_bias_q(int index) const {
  return _impl_.encdec_project_bias_q_.Get(index);
}
inline float QuantDecoderLayer::encdec_project_bias_q(int index) const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.encdec_project_bias_q)
  return _internal_encdec_project_bias_q(index);
}
inline void QuantDecoderLayer::set_encdec_project_bias_q(int index, float value) {
  _impl_.encdec_project_bias_q_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.encdec_project_bias_q)
}
inline void QuantDecoderLayer::_internal_add_encdec_project_bias_q(float value) {
  _impl_.encdec_project_bias_q_.Add(value);
}
inline void QuantDecoderLayer::add_encdec_project_bias_q(float value) {
  _internal_add_encdec_project_bias_q(value);
  // @@protoc_insertion_point(field_add:QuantDecoderLayer.encdec_project_bias_q)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::_internal_encdec_project_bias_q() const {
  return _impl_.encdec_project_bias_q_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::encdec_project_bias_q() const {
  // @@protoc_insertion_point(field_list:QuantDecoderLayer.encdec_project_bias_q)
  return _internal_encdec_project_bias_q();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::_internal_mutable_encdec_project_bias_q() {
  return &_impl_.encdec_project_bias_q_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::mutable_encdec_project_bias_q() {
  // @@protoc_insertion_point(field_mutable_list:QuantDecoderLayer.encdec_project_bias_q)
  return _internal_mutable_encdec_project_bias_q();
}

// bytes encdec_project_kernel_output = 11;
inline void QuantDecoderLayer::clear_encdec_project_kernel_output() {
  _impl_.encdec_project_kernel_output_.ClearToEmpty();
}
inline const std::string& QuantDecoderLayer::encdec_project_kernel_output() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.encdec_project_kernel_output)
  return _internal_encdec_project_kernel_output();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuantDecoderLayer::set_encdec_project_kernel_output(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encdec_project_kernel_output_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.encdec_project_kernel_output)
}
inline std::string* QuantDecoderLayer::mutable_encdec_project_kernel_output() {
  std::string* _s = _internal_mutable_encdec_project_kernel_output();
  // @@protoc_insertion_point(field_mutable:QuantDecoderLayer.encdec_project_kernel_output)
  return _s;
}
inline const std::string& QuantDecoderLayer::_internal_encdec_project_kernel_output() const {
  return _impl_.encdec_project_kernel_output_.Get();
}
inline void QuantDecoderLayer::_internal_set_encdec_project_kernel_output(const std::string& value) {
  
  _impl_.encdec_project_kernel_output_.Set(value, GetArenaForAllocation());
}
inline std::string* QuantDecoderLayer::_internal_mutable_encdec_project_kernel_output() {
  
  return _impl_.encdec_project_kernel_output_.Mutable(GetArenaForAllocation());
}
inline std::string* QuantDecoderLayer::release_encdec_project_kernel_output() {
  // @@protoc_insertion_point(field_release:QuantDecoderLayer.encdec_project_kernel_output)
  return _impl_.encdec_project_kernel_output_.Release();
}
inline void QuantDecoderLayer::set_allocated_encdec_project_kernel_output(std::string* encdec_project_kernel_output) {
  if (encdec_project_kernel_output != nullptr) {
    
  } else {
    
  }
  _impl_.encdec_project_kernel_output_.SetAllocated(encdec_project_kernel_output, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encdec_project_kernel_output_.IsDefault()) {
    _impl_.encdec_project_kernel_output_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QuantDecoderLayer.encdec_project_kernel_output)
}

// repeated float encdec_project_bias_output = 12;
inline int QuantDecoderLayer::_internal_encdec_project_bias_output_size() const {
  return _impl_.encdec_project_bias_output_.size();
}
inline int QuantDecoderLayer::encdec_project_bias_output_size() const {
  return _internal_encdec_project_bias_output_size();
}
inline void QuantDecoderLayer::clear_encdec_project_bias_output() {
  _impl_.encdec_project_bias_output_.Clear();
}
inline float QuantDecoderLayer::_internal_encdec_project_bias_output(int index) const {
  return _impl_.encdec_project_bias_output_.Get(index);
}
inline float QuantDecoderLayer::encdec_project_bias_output(int index) const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.encdec_project_bias_output)
  return _internal_encdec_project_bias_output(index);
}
inline void QuantDecoderLayer::set_encdec_project_bias_output(int index, float value) {
  _impl_.encdec_project_bias_output_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.encdec_project_bias_output)
}
inline void QuantDecoderLayer::_internal_add_encdec_project_bias_output(float value) {
  _impl_.encdec_project_bias_output_.Add(value);
}
inline void QuantDecoderLayer::add_encdec_project_bias_output(float value) {
  _internal_add_encdec_project_bias_output(value);
  // @@protoc_insertion_point(field_add:QuantDecoderLayer.encdec_project_bias_output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::_internal_encdec_project_bias_output() const {
  return _impl_.encdec_project_bias_output_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::encdec_project_bias_output() const {
  // @@protoc_insertion_point(field_list:QuantDecoderLayer.encdec_project_bias_output)
  return _internal_encdec_project_bias_output();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::_internal_mutable_encdec_project_bias_output() {
  return &_impl_.encdec_project_bias_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::mutable_encdec_project_bias_output() {
  // @@protoc_insertion_point(field_mutable_list:QuantDecoderLayer.encdec_project_bias_output)
  return _internal_mutable_encdec_project_bias_output();
}

// repeated float ffn_norm_scale = 13;
inline int QuantDecoderLayer::_internal_ffn_norm_scale_size() const {
  return _impl_.ffn_norm_scale_.size();
}
inline int QuantDecoderLayer::ffn_norm_scale_size() const {
  return _internal_ffn_norm_scale_size();
}
inline void QuantDecoderLayer::clear_ffn_norm_scale() {
  _impl_.ffn_norm_scale_.Clear();
}
inline float QuantDecoderLayer::_internal_ffn_norm_scale(int index) const {
  return _impl_.ffn_norm_scale_.Get(index);
}
inline float QuantDecoderLayer::ffn_norm_scale(int index) const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.ffn_norm_scale)
  return _internal_ffn_norm_scale(index);
}
inline void QuantDecoderLayer::set_ffn_norm_scale(int index, float value) {
  _impl_.ffn_norm_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.ffn_norm_scale)
}
inline void QuantDecoderLayer::_internal_add_ffn_norm_scale(float value) {
  _impl_.ffn_norm_scale_.Add(value);
}
inline void QuantDecoderLayer::add_ffn_norm_scale(float value) {
  _internal_add_ffn_norm_scale(value);
  // @@protoc_insertion_point(field_add:QuantDecoderLayer.ffn_norm_scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::_internal_ffn_norm_scale() const {
  return _impl_.ffn_norm_scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::ffn_norm_scale() const {
  // @@protoc_insertion_point(field_list:QuantDecoderLayer.ffn_norm_scale)
  return _internal_ffn_norm_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::_internal_mutable_ffn_norm_scale() {
  return &_impl_.ffn_norm_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::mutable_ffn_norm_scale() {
  // @@protoc_insertion_point(field_mutable_list:QuantDecoderLayer.ffn_norm_scale)
  return _internal_mutable_ffn_norm_scale();
}

// repeated float ffn_norm_bias = 14;
inline int QuantDecoderLayer::_internal_ffn_norm_bias_size() const {
  return _impl_.ffn_norm_bias_.size();
}
inline int QuantDecoderLayer::ffn_norm_bias_size() const {
  return _internal_ffn_norm_bias_size();
}
inline void QuantDecoderLayer::clear_ffn_norm_bias() {
  _impl_.ffn_norm_bias_.Clear();
}
inline float QuantDecoderLayer::_internal_ffn_norm_bias(int index) const {
  return _impl_.ffn_norm_bias_.Get(index);
}
inline float QuantDecoderLayer::ffn_norm_bias(int index) const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.ffn_norm_bias)
  return _internal_ffn_norm_bias(index);
}
inline void QuantDecoderLayer::set_ffn_norm_bias(int index, float value) {
  _impl_.ffn_norm_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.ffn_norm_bias)
}
inline void QuantDecoderLayer::_internal_add_ffn_norm_bias(float value) {
  _impl_.ffn_norm_bias_.Add(value);
}
inline void QuantDecoderLayer::add_ffn_norm_bias(float value) {
  _internal_add_ffn_norm_bias(value);
  // @@protoc_insertion_point(field_add:QuantDecoderLayer.ffn_norm_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::_internal_ffn_norm_bias() const {
  return _impl_.ffn_norm_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::ffn_norm_bias() const {
  // @@protoc_insertion_point(field_list:QuantDecoderLayer.ffn_norm_bias)
  return _internal_ffn_norm_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::_internal_mutable_ffn_norm_bias() {
  return &_impl_.ffn_norm_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::mutable_ffn_norm_bias() {
  // @@protoc_insertion_point(field_mutable_list:QuantDecoderLayer.ffn_norm_bias)
  return _internal_mutable_ffn_norm_bias();
}

// bytes ffn_first_kernel = 15;
inline void QuantDecoderLayer::clear_ffn_first_kernel() {
  _impl_.ffn_first_kernel_.ClearToEmpty();
}
inline const std::string& QuantDecoderLayer::ffn_first_kernel() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.ffn_first_kernel)
  return _internal_ffn_first_kernel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuantDecoderLayer::set_ffn_first_kernel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ffn_first_kernel_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.ffn_first_kernel)
}
inline std::string* QuantDecoderLayer::mutable_ffn_first_kernel() {
  std::string* _s = _internal_mutable_ffn_first_kernel();
  // @@protoc_insertion_point(field_mutable:QuantDecoderLayer.ffn_first_kernel)
  return _s;
}
inline const std::string& QuantDecoderLayer::_internal_ffn_first_kernel() const {
  return _impl_.ffn_first_kernel_.Get();
}
inline void QuantDecoderLayer::_internal_set_ffn_first_kernel(const std::string& value) {
  
  _impl_.ffn_first_kernel_.Set(value, GetArenaForAllocation());
}
inline std::string* QuantDecoderLayer::_internal_mutable_ffn_first_kernel() {
  
  return _impl_.ffn_first_kernel_.Mutable(GetArenaForAllocation());
}
inline std::string* QuantDecoderLayer::release_ffn_first_kernel() {
  // @@protoc_insertion_point(field_release:QuantDecoderLayer.ffn_first_kernel)
  return _impl_.ffn_first_kernel_.Release();
}
inline void QuantDecoderLayer::set_allocated_ffn_first_kernel(std::string* ffn_first_kernel) {
  if (ffn_first_kernel != nullptr) {
    
  } else {
    
  }
  _impl_.ffn_first_kernel_.SetAllocated(ffn_first_kernel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ffn_first_kernel_.IsDefault()) {
    _impl_.ffn_first_kernel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QuantDecoderLayer.ffn_first_kernel)
}

// repeated float ffn_first_bias = 16;
inline int QuantDecoderLayer::_internal_ffn_first_bias_size() const {
  return _impl_.ffn_first_bias_.size();
}
inline int QuantDecoderLayer::ffn_first_bias_size() const {
  return _internal_ffn_first_bias_size();
}
inline void QuantDecoderLayer::clear_ffn_first_bias() {
  _impl_.ffn_first_bias_.Clear();
}
inline float QuantDecoderLayer::_internal_ffn_first_bias(int index) const {
  return _impl_.ffn_first_bias_.Get(index);
}
inline float QuantDecoderLayer::ffn_first_bias(int index) const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.ffn_first_bias)
  return _internal_ffn_first_bias(index);
}
inline void QuantDecoderLayer::set_ffn_first_bias(int index, float value) {
  _impl_.ffn_first_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.ffn_first_bias)
}
inline void QuantDecoderLayer::_internal_add_ffn_first_bias(float value) {
  _impl_.ffn_first_bias_.Add(value);
}
inline void QuantDecoderLayer::add_ffn_first_bias(float value) {
  _internal_add_ffn_first_bias(value);
  // @@protoc_insertion_point(field_add:QuantDecoderLayer.ffn_first_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::_internal_ffn_first_bias() const {
  return _impl_.ffn_first_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::ffn_first_bias() const {
  // @@protoc_insertion_point(field_list:QuantDecoderLayer.ffn_first_bias)
  return _internal_ffn_first_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::_internal_mutable_ffn_first_bias() {
  return &_impl_.ffn_first_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::mutable_ffn_first_bias() {
  // @@protoc_insertion_point(field_mutable_list:QuantDecoderLayer.ffn_first_bias)
  return _internal_mutable_ffn_first_bias();
}

// bytes ffn_second_kernel = 17;
inline void QuantDecoderLayer::clear_ffn_second_kernel() {
  _impl_.ffn_second_kernel_.ClearToEmpty();
}
inline const std::string& QuantDecoderLayer::ffn_second_kernel() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.ffn_second_kernel)
  return _internal_ffn_second_kernel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuantDecoderLayer::set_ffn_second_kernel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ffn_second_kernel_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.ffn_second_kernel)
}
inline std::string* QuantDecoderLayer::mutable_ffn_second_kernel() {
  std::string* _s = _internal_mutable_ffn_second_kernel();
  // @@protoc_insertion_point(field_mutable:QuantDecoderLayer.ffn_second_kernel)
  return _s;
}
inline const std::string& QuantDecoderLayer::_internal_ffn_second_kernel() const {
  return _impl_.ffn_second_kernel_.Get();
}
inline void QuantDecoderLayer::_internal_set_ffn_second_kernel(const std::string& value) {
  
  _impl_.ffn_second_kernel_.Set(value, GetArenaForAllocation());
}
inline std::string* QuantDecoderLayer::_internal_mutable_ffn_second_kernel() {
  
  return _impl_.ffn_second_kernel_.Mutable(GetArenaForAllocation());
}
inline std::string* QuantDecoderLayer::release_ffn_second_kernel() {
  // @@protoc_insertion_point(field_release:QuantDecoderLayer.ffn_second_kernel)
  return _impl_.ffn_second_kernel_.Release();
}
inline void QuantDecoderLayer::set_allocated_ffn_second_kernel(std::string* ffn_second_kernel) {
  if (ffn_second_kernel != nullptr) {
    
  } else {
    
  }
  _impl_.ffn_second_kernel_.SetAllocated(ffn_second_kernel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ffn_second_kernel_.IsDefault()) {
    _impl_.ffn_second_kernel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QuantDecoderLayer.ffn_second_kernel)
}

// repeated float ffn_second_bias = 18;
inline int QuantDecoderLayer::_internal_ffn_second_bias_size() const {
  return _impl_.ffn_second_bias_.size();
}
inline int QuantDecoderLayer::ffn_second_bias_size() const {
  return _internal_ffn_second_bias_size();
}
inline void QuantDecoderLayer::clear_ffn_second_bias() {
  _impl_.ffn_second_bias_.Clear();
}
inline float QuantDecoderLayer::_internal_ffn_second_bias(int index) const {
  return _impl_.ffn_second_bias_.Get(index);
}
inline float QuantDecoderLayer::ffn_second_bias(int index) const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.ffn_second_bias)
  return _internal_ffn_second_bias(index);
}
inline void QuantDecoderLayer::set_ffn_second_bias(int index, float value) {
  _impl_.ffn_second_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.ffn_second_bias)
}
inline void QuantDecoderLayer::_internal_add_ffn_second_bias(float value) {
  _impl_.ffn_second_bias_.Add(value);
}
inline void QuantDecoderLayer::add_ffn_second_bias(float value) {
  _internal_add_ffn_second_bias(value);
  // @@protoc_insertion_point(field_add:QuantDecoderLayer.ffn_second_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::_internal_ffn_second_bias() const {
  return _impl_.ffn_second_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantDecoderLayer::ffn_second_bias() const {
  // @@protoc_insertion_point(field_list:QuantDecoderLayer.ffn_second_bias)
  return _internal_ffn_second_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::_internal_mutable_ffn_second_bias() {
  return &_impl_.ffn_second_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantDecoderLayer::mutable_ffn_second_bias() {
  // @@protoc_insertion_point(field_mutable_list:QuantDecoderLayer.ffn_second_bias)
  return _internal_mutable_ffn_second_bias();
}

// float self_project_kernel_qkv_clip_max = 19;
inline void QuantDecoderLayer::clear_self_project_kernel_qkv_clip_max() {
  _impl_.self_project_kernel_qkv_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_self_project_kernel_qkv_clip_max() const {
  return _impl_.self_project_kernel_qkv_clip_max_;
}
inline float QuantDecoderLayer::self_project_kernel_qkv_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.self_project_kernel_qkv_clip_max)
  return _internal_self_project_kernel_qkv_clip_max();
}
inline void QuantDecoderLayer::_internal_set_self_project_kernel_qkv_clip_max(float value) {
  
  _impl_.self_project_kernel_qkv_clip_max_ = value;
}
inline void QuantDecoderLayer::set_self_project_kernel_qkv_clip_max(float value) {
  _internal_set_self_project_kernel_qkv_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.self_project_kernel_qkv_clip_max)
}

// float self_project_kernel_output_clip_max = 20;
inline void QuantDecoderLayer::clear_self_project_kernel_output_clip_max() {
  _impl_.self_project_kernel_output_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_self_project_kernel_output_clip_max() const {
  return _impl_.self_project_kernel_output_clip_max_;
}
inline float QuantDecoderLayer::self_project_kernel_output_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.self_project_kernel_output_clip_max)
  return _internal_self_project_kernel_output_clip_max();
}
inline void QuantDecoderLayer::_internal_set_self_project_kernel_output_clip_max(float value) {
  
  _impl_.self_project_kernel_output_clip_max_ = value;
}
inline void QuantDecoderLayer::set_self_project_kernel_output_clip_max(float value) {
  _internal_set_self_project_kernel_output_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.self_project_kernel_output_clip_max)
}

// float encdec_project_kernel_q_clip_max = 21;
inline void QuantDecoderLayer::clear_encdec_project_kernel_q_clip_max() {
  _impl_.encdec_project_kernel_q_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_encdec_project_kernel_q_clip_max() const {
  return _impl_.encdec_project_kernel_q_clip_max_;
}
inline float QuantDecoderLayer::encdec_project_kernel_q_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.encdec_project_kernel_q_clip_max)
  return _internal_encdec_project_kernel_q_clip_max();
}
inline void QuantDecoderLayer::_internal_set_encdec_project_kernel_q_clip_max(float value) {
  
  _impl_.encdec_project_kernel_q_clip_max_ = value;
}
inline void QuantDecoderLayer::set_encdec_project_kernel_q_clip_max(float value) {
  _internal_set_encdec_project_kernel_q_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.encdec_project_kernel_q_clip_max)
}

// float encdec_project_kernel_output_clip_max = 22;
inline void QuantDecoderLayer::clear_encdec_project_kernel_output_clip_max() {
  _impl_.encdec_project_kernel_output_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_encdec_project_kernel_output_clip_max() const {
  return _impl_.encdec_project_kernel_output_clip_max_;
}
inline float QuantDecoderLayer::encdec_project_kernel_output_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.encdec_project_kernel_output_clip_max)
  return _internal_encdec_project_kernel_output_clip_max();
}
inline void QuantDecoderLayer::_internal_set_encdec_project_kernel_output_clip_max(float value) {
  
  _impl_.encdec_project_kernel_output_clip_max_ = value;
}
inline void QuantDecoderLayer::set_encdec_project_kernel_output_clip_max(float value) {
  _internal_set_encdec_project_kernel_output_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.encdec_project_kernel_output_clip_max)
}

// float ffn_first_kernel_clip_max = 23;
inline void QuantDecoderLayer::clear_ffn_first_kernel_clip_max() {
  _impl_.ffn_first_kernel_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_ffn_first_kernel_clip_max() const {
  return _impl_.ffn_first_kernel_clip_max_;
}
inline float QuantDecoderLayer::ffn_first_kernel_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.ffn_first_kernel_clip_max)
  return _internal_ffn_first_kernel_clip_max();
}
inline void QuantDecoderLayer::_internal_set_ffn_first_kernel_clip_max(float value) {
  
  _impl_.ffn_first_kernel_clip_max_ = value;
}
inline void QuantDecoderLayer::set_ffn_first_kernel_clip_max(float value) {
  _internal_set_ffn_first_kernel_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.ffn_first_kernel_clip_max)
}

// float ffn_second_kernel_clip_max = 24;
inline void QuantDecoderLayer::clear_ffn_second_kernel_clip_max() {
  _impl_.ffn_second_kernel_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_ffn_second_kernel_clip_max() const {
  return _impl_.ffn_second_kernel_clip_max_;
}
inline float QuantDecoderLayer::ffn_second_kernel_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.ffn_second_kernel_clip_max)
  return _internal_ffn_second_kernel_clip_max();
}
inline void QuantDecoderLayer::_internal_set_ffn_second_kernel_clip_max(float value) {
  
  _impl_.ffn_second_kernel_clip_max_ = value;
}
inline void QuantDecoderLayer::set_ffn_second_kernel_clip_max(float value) {
  _internal_set_ffn_second_kernel_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.ffn_second_kernel_clip_max)
}

// float self_ln_clip_max = 25;
inline void QuantDecoderLayer::clear_self_ln_clip_max() {
  _impl_.self_ln_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_self_ln_clip_max() const {
  return _impl_.self_ln_clip_max_;
}
inline float QuantDecoderLayer::self_ln_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.self_ln_clip_max)
  return _internal_self_ln_clip_max();
}
inline void QuantDecoderLayer::_internal_set_self_ln_clip_max(float value) {
  
  _impl_.self_ln_clip_max_ = value;
}
inline void QuantDecoderLayer::set_self_ln_clip_max(float value) {
  _internal_set_self_ln_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.self_ln_clip_max)
}

// float self_project_output_clip_max = 26;
inline void QuantDecoderLayer::clear_self_project_output_clip_max() {
  _impl_.self_project_output_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_self_project_output_clip_max() const {
  return _impl_.self_project_output_clip_max_;
}
inline float QuantDecoderLayer::self_project_output_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.self_project_output_clip_max)
  return _internal_self_project_output_clip_max();
}
inline void QuantDecoderLayer::_internal_set_self_project_output_clip_max(float value) {
  
  _impl_.self_project_output_clip_max_ = value;
}
inline void QuantDecoderLayer::set_self_project_output_clip_max(float value) {
  _internal_set_self_project_output_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.self_project_output_clip_max)
}

// float encdec_ln_clip_max = 27;
inline void QuantDecoderLayer::clear_encdec_ln_clip_max() {
  _impl_.encdec_ln_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_encdec_ln_clip_max() const {
  return _impl_.encdec_ln_clip_max_;
}
inline float QuantDecoderLayer::encdec_ln_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.encdec_ln_clip_max)
  return _internal_encdec_ln_clip_max();
}
inline void QuantDecoderLayer::_internal_set_encdec_ln_clip_max(float value) {
  
  _impl_.encdec_ln_clip_max_ = value;
}
inline void QuantDecoderLayer::set_encdec_ln_clip_max(float value) {
  _internal_set_encdec_ln_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.encdec_ln_clip_max)
}

// float encdec_project_output_clip_max = 28;
inline void QuantDecoderLayer::clear_encdec_project_output_clip_max() {
  _impl_.encdec_project_output_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_encdec_project_output_clip_max() const {
  return _impl_.encdec_project_output_clip_max_;
}
inline float QuantDecoderLayer::encdec_project_output_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.encdec_project_output_clip_max)
  return _internal_encdec_project_output_clip_max();
}
inline void QuantDecoderLayer::_internal_set_encdec_project_output_clip_max(float value) {
  
  _impl_.encdec_project_output_clip_max_ = value;
}
inline void QuantDecoderLayer::set_encdec_project_output_clip_max(float value) {
  _internal_set_encdec_project_output_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.encdec_project_output_clip_max)
}

// float ffn_ln_clip_max = 29;
inline void QuantDecoderLayer::clear_ffn_ln_clip_max() {
  _impl_.ffn_ln_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_ffn_ln_clip_max() const {
  return _impl_.ffn_ln_clip_max_;
}
inline float QuantDecoderLayer::ffn_ln_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.ffn_ln_clip_max)
  return _internal_ffn_ln_clip_max();
}
inline void QuantDecoderLayer::_internal_set_ffn_ln_clip_max(float value) {
  
  _impl_.ffn_ln_clip_max_ = value;
}
inline void QuantDecoderLayer::set_ffn_ln_clip_max(float value) {
  _internal_set_ffn_ln_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.ffn_ln_clip_max)
}

// float ffn_first_act_clip_max = 30;
inline void QuantDecoderLayer::clear_ffn_first_act_clip_max() {
  _impl_.ffn_first_act_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_ffn_first_act_clip_max() const {
  return _impl_.ffn_first_act_clip_max_;
}
inline float QuantDecoderLayer::ffn_first_act_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.ffn_first_act_clip_max)
  return _internal_ffn_first_act_clip_max();
}
inline void QuantDecoderLayer::_internal_set_ffn_first_act_clip_max(float value) {
  
  _impl_.ffn_first_act_clip_max_ = value;
}
inline void QuantDecoderLayer::set_ffn_first_act_clip_max(float value) {
  _internal_set_ffn_first_act_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.ffn_first_act_clip_max)
}

// float self_qkv_dense_clip_max = 31;
inline void QuantDecoderLayer::clear_self_qkv_dense_clip_max() {
  _impl_.self_qkv_dense_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_self_qkv_dense_clip_max() const {
  return _impl_.self_qkv_dense_clip_max_;
}
inline float QuantDecoderLayer::self_qkv_dense_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.self_qkv_dense_clip_max)
  return _internal_self_qkv_dense_clip_max();
}
inline void QuantDecoderLayer::_internal_set_self_qkv_dense_clip_max(float value) {
  
  _impl_.self_qkv_dense_clip_max_ = value;
}
inline void QuantDecoderLayer::set_self_qkv_dense_clip_max(float value) {
  _internal_set_self_qkv_dense_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.self_qkv_dense_clip_max)
}

// float self_output_dense_clip_max = 32;
inline void QuantDecoderLayer::clear_self_output_dense_clip_max() {
  _impl_.self_output_dense_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_self_output_dense_clip_max() const {
  return _impl_.self_output_dense_clip_max_;
}
inline float QuantDecoderLayer::self_output_dense_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.self_output_dense_clip_max)
  return _internal_self_output_dense_clip_max();
}
inline void QuantDecoderLayer::_internal_set_self_output_dense_clip_max(float value) {
  
  _impl_.self_output_dense_clip_max_ = value;
}
inline void QuantDecoderLayer::set_self_output_dense_clip_max(float value) {
  _internal_set_self_output_dense_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.self_output_dense_clip_max)
}

// float encdec_q_dense_clip_max = 33;
inline void QuantDecoderLayer::clear_encdec_q_dense_clip_max() {
  _impl_.encdec_q_dense_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_encdec_q_dense_clip_max() const {
  return _impl_.encdec_q_dense_clip_max_;
}
inline float QuantDecoderLayer::encdec_q_dense_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.encdec_q_dense_clip_max)
  return _internal_encdec_q_dense_clip_max();
}
inline void QuantDecoderLayer::_internal_set_encdec_q_dense_clip_max(float value) {
  
  _impl_.encdec_q_dense_clip_max_ = value;
}
inline void QuantDecoderLayer::set_encdec_q_dense_clip_max(float value) {
  _internal_set_encdec_q_dense_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.encdec_q_dense_clip_max)
}

// float encdec_output_dense_clip_max = 34;
inline void QuantDecoderLayer::clear_encdec_output_dense_clip_max() {
  _impl_.encdec_output_dense_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_encdec_output_dense_clip_max() const {
  return _impl_.encdec_output_dense_clip_max_;
}
inline float QuantDecoderLayer::encdec_output_dense_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.encdec_output_dense_clip_max)
  return _internal_encdec_output_dense_clip_max();
}
inline void QuantDecoderLayer::_internal_set_encdec_output_dense_clip_max(float value) {
  
  _impl_.encdec_output_dense_clip_max_ = value;
}
inline void QuantDecoderLayer::set_encdec_output_dense_clip_max(float value) {
  _internal_set_encdec_output_dense_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.encdec_output_dense_clip_max)
}

// float ffn_first_output_clip_max = 35;
inline void QuantDecoderLayer::clear_ffn_first_output_clip_max() {
  _impl_.ffn_first_output_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_ffn_first_output_clip_max() const {
  return _impl_.ffn_first_output_clip_max_;
}
inline float QuantDecoderLayer::ffn_first_output_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.ffn_first_output_clip_max)
  return _internal_ffn_first_output_clip_max();
}
inline void QuantDecoderLayer::_internal_set_ffn_first_output_clip_max(float value) {
  
  _impl_.ffn_first_output_clip_max_ = value;
}
inline void QuantDecoderLayer::set_ffn_first_output_clip_max(float value) {
  _internal_set_ffn_first_output_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.ffn_first_output_clip_max)
}

// float ffn_second_output_clip_max = 36;
inline void QuantDecoderLayer::clear_ffn_second_output_clip_max() {
  _impl_.ffn_second_output_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_ffn_second_output_clip_max() const {
  return _impl_.ffn_second_output_clip_max_;
}
inline float QuantDecoderLayer::ffn_second_output_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.ffn_second_output_clip_max)
  return _internal_ffn_second_output_clip_max();
}
inline void QuantDecoderLayer::_internal_set_ffn_second_output_clip_max(float value) {
  
  _impl_.ffn_second_output_clip_max_ = value;
}
inline void QuantDecoderLayer::set_ffn_second_output_clip_max(float value) {
  _internal_set_ffn_second_output_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.ffn_second_output_clip_max)
}

// float self_qkv_bias_out_clip_max = 37;
inline void QuantDecoderLayer::clear_self_qkv_bias_out_clip_max() {
  _impl_.self_qkv_bias_out_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_self_qkv_bias_out_clip_max() const {
  return _impl_.self_qkv_bias_out_clip_max_;
}
inline float QuantDecoderLayer::self_qkv_bias_out_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.self_qkv_bias_out_clip_max)
  return _internal_self_qkv_bias_out_clip_max();
}
inline void QuantDecoderLayer::_internal_set_self_qkv_bias_out_clip_max(float value) {
  
  _impl_.self_qkv_bias_out_clip_max_ = value;
}
inline void QuantDecoderLayer::set_self_qkv_bias_out_clip_max(float value) {
  _internal_set_self_qkv_bias_out_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.self_qkv_bias_out_clip_max)
}

// float encdec_q_bias_out_clip_max = 38;
inline void QuantDecoderLayer::clear_encdec_q_bias_out_clip_max() {
  _impl_.encdec_q_bias_out_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_encdec_q_bias_out_clip_max() const {
  return _impl_.encdec_q_bias_out_clip_max_;
}
inline float QuantDecoderLayer::encdec_q_bias_out_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.encdec_q_bias_out_clip_max)
  return _internal_encdec_q_bias_out_clip_max();
}
inline void QuantDecoderLayer::_internal_set_encdec_q_bias_out_clip_max(float value) {
  
  _impl_.encdec_q_bias_out_clip_max_ = value;
}
inline void QuantDecoderLayer::set_encdec_q_bias_out_clip_max(float value) {
  _internal_set_encdec_q_bias_out_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.encdec_q_bias_out_clip_max)
}

// float encdec_kv_bias_out_clip_max = 39;
inline void QuantDecoderLayer::clear_encdec_kv_bias_out_clip_max() {
  _impl_.encdec_kv_bias_out_clip_max_ = 0;
}
inline float QuantDecoderLayer::_internal_encdec_kv_bias_out_clip_max() const {
  return _impl_.encdec_kv_bias_out_clip_max_;
}
inline float QuantDecoderLayer::encdec_kv_bias_out_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantDecoderLayer.encdec_kv_bias_out_clip_max)
  return _internal_encdec_kv_bias_out_clip_max();
}
inline void QuantDecoderLayer::_internal_set_encdec_kv_bias_out_clip_max(float value) {
  
  _impl_.encdec_kv_bias_out_clip_max_ = value;
}
inline void QuantDecoderLayer::set_encdec_kv_bias_out_clip_max(float value) {
  _internal_set_encdec_kv_bias_out_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantDecoderLayer.encdec_kv_bias_out_clip_max)
}

// -------------------------------------------------------------------

// QuantEmbeddingLayer

// bytes token_embedding = 1;
inline void QuantEmbeddingLayer::clear_token_embedding() {
  _impl_.token_embedding_.ClearToEmpty();
}
inline const std::string& QuantEmbeddingLayer::token_embedding() const {
  // @@protoc_insertion_point(field_get:QuantEmbeddingLayer.token_embedding)
  return _internal_token_embedding();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuantEmbeddingLayer::set_token_embedding(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_embedding_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QuantEmbeddingLayer.token_embedding)
}
inline std::string* QuantEmbeddingLayer::mutable_token_embedding() {
  std::string* _s = _internal_mutable_token_embedding();
  // @@protoc_insertion_point(field_mutable:QuantEmbeddingLayer.token_embedding)
  return _s;
}
inline const std::string& QuantEmbeddingLayer::_internal_token_embedding() const {
  return _impl_.token_embedding_.Get();
}
inline void QuantEmbeddingLayer::_internal_set_token_embedding(const std::string& value) {
  
  _impl_.token_embedding_.Set(value, GetArenaForAllocation());
}
inline std::string* QuantEmbeddingLayer::_internal_mutable_token_embedding() {
  
  return _impl_.token_embedding_.Mutable(GetArenaForAllocation());
}
inline std::string* QuantEmbeddingLayer::release_token_embedding() {
  // @@protoc_insertion_point(field_release:QuantEmbeddingLayer.token_embedding)
  return _impl_.token_embedding_.Release();
}
inline void QuantEmbeddingLayer::set_allocated_token_embedding(std::string* token_embedding) {
  if (token_embedding != nullptr) {
    
  } else {
    
  }
  _impl_.token_embedding_.SetAllocated(token_embedding, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_embedding_.IsDefault()) {
    _impl_.token_embedding_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QuantEmbeddingLayer.token_embedding)
}

// repeated float position_embedding = 2;
inline int QuantEmbeddingLayer::_internal_position_embedding_size() const {
  return _impl_.position_embedding_.size();
}
inline int QuantEmbeddingLayer::position_embedding_size() const {
  return _internal_position_embedding_size();
}
inline void QuantEmbeddingLayer::clear_position_embedding() {
  _impl_.position_embedding_.Clear();
}
inline float QuantEmbeddingLayer::_internal_position_embedding(int index) const {
  return _impl_.position_embedding_.Get(index);
}
inline float QuantEmbeddingLayer::position_embedding(int index) const {
  // @@protoc_insertion_point(field_get:QuantEmbeddingLayer.position_embedding)
  return _internal_position_embedding(index);
}
inline void QuantEmbeddingLayer::set_position_embedding(int index, float value) {
  _impl_.position_embedding_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantEmbeddingLayer.position_embedding)
}
inline void QuantEmbeddingLayer::_internal_add_position_embedding(float value) {
  _impl_.position_embedding_.Add(value);
}
inline void QuantEmbeddingLayer::add_position_embedding(float value) {
  _internal_add_position_embedding(value);
  // @@protoc_insertion_point(field_add:QuantEmbeddingLayer.position_embedding)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEmbeddingLayer::_internal_position_embedding() const {
  return _impl_.position_embedding_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEmbeddingLayer::position_embedding() const {
  // @@protoc_insertion_point(field_list:QuantEmbeddingLayer.position_embedding)
  return _internal_position_embedding();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEmbeddingLayer::_internal_mutable_position_embedding() {
  return &_impl_.position_embedding_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEmbeddingLayer::mutable_position_embedding() {
  // @@protoc_insertion_point(field_mutable_list:QuantEmbeddingLayer.position_embedding)
  return _internal_mutable_position_embedding();
}

// repeated float norm_scale = 3;
inline int QuantEmbeddingLayer::_internal_norm_scale_size() const {
  return _impl_.norm_scale_.size();
}
inline int QuantEmbeddingLayer::norm_scale_size() const {
  return _internal_norm_scale_size();
}
inline void QuantEmbeddingLayer::clear_norm_scale() {
  _impl_.norm_scale_.Clear();
}
inline float QuantEmbeddingLayer::_internal_norm_scale(int index) const {
  return _impl_.norm_scale_.Get(index);
}
inline float QuantEmbeddingLayer::norm_scale(int index) const {
  // @@protoc_insertion_point(field_get:QuantEmbeddingLayer.norm_scale)
  return _internal_norm_scale(index);
}
inline void QuantEmbeddingLayer::set_norm_scale(int index, float value) {
  _impl_.norm_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantEmbeddingLayer.norm_scale)
}
inline void QuantEmbeddingLayer::_internal_add_norm_scale(float value) {
  _impl_.norm_scale_.Add(value);
}
inline void QuantEmbeddingLayer::add_norm_scale(float value) {
  _internal_add_norm_scale(value);
  // @@protoc_insertion_point(field_add:QuantEmbeddingLayer.norm_scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEmbeddingLayer::_internal_norm_scale() const {
  return _impl_.norm_scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEmbeddingLayer::norm_scale() const {
  // @@protoc_insertion_point(field_list:QuantEmbeddingLayer.norm_scale)
  return _internal_norm_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEmbeddingLayer::_internal_mutable_norm_scale() {
  return &_impl_.norm_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEmbeddingLayer::mutable_norm_scale() {
  // @@protoc_insertion_point(field_mutable_list:QuantEmbeddingLayer.norm_scale)
  return _internal_mutable_norm_scale();
}

// repeated float norm_bias = 4;
inline int QuantEmbeddingLayer::_internal_norm_bias_size() const {
  return _impl_.norm_bias_.size();
}
inline int QuantEmbeddingLayer::norm_bias_size() const {
  return _internal_norm_bias_size();
}
inline void QuantEmbeddingLayer::clear_norm_bias() {
  _impl_.norm_bias_.Clear();
}
inline float QuantEmbeddingLayer::_internal_norm_bias(int index) const {
  return _impl_.norm_bias_.Get(index);
}
inline float QuantEmbeddingLayer::norm_bias(int index) const {
  // @@protoc_insertion_point(field_get:QuantEmbeddingLayer.norm_bias)
  return _internal_norm_bias(index);
}
inline void QuantEmbeddingLayer::set_norm_bias(int index, float value) {
  _impl_.norm_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantEmbeddingLayer.norm_bias)
}
inline void QuantEmbeddingLayer::_internal_add_norm_bias(float value) {
  _impl_.norm_bias_.Add(value);
}
inline void QuantEmbeddingLayer::add_norm_bias(float value) {
  _internal_add_norm_bias(value);
  // @@protoc_insertion_point(field_add:QuantEmbeddingLayer.norm_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEmbeddingLayer::_internal_norm_bias() const {
  return _impl_.norm_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEmbeddingLayer::norm_bias() const {
  // @@protoc_insertion_point(field_list:QuantEmbeddingLayer.norm_bias)
  return _internal_norm_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEmbeddingLayer::_internal_mutable_norm_bias() {
  return &_impl_.norm_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEmbeddingLayer::mutable_norm_bias() {
  // @@protoc_insertion_point(field_mutable_list:QuantEmbeddingLayer.norm_bias)
  return _internal_mutable_norm_bias();
}

// bytes encode_output_project_kernel_kv = 5;
inline void QuantEmbeddingLayer::clear_encode_output_project_kernel_kv() {
  _impl_.encode_output_project_kernel_kv_.ClearToEmpty();
}
inline const std::string& QuantEmbeddingLayer::encode_output_project_kernel_kv() const {
  // @@protoc_insertion_point(field_get:QuantEmbeddingLayer.encode_output_project_kernel_kv)
  return _internal_encode_output_project_kernel_kv();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuantEmbeddingLayer::set_encode_output_project_kernel_kv(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encode_output_project_kernel_kv_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QuantEmbeddingLayer.encode_output_project_kernel_kv)
}
inline std::string* QuantEmbeddingLayer::mutable_encode_output_project_kernel_kv() {
  std::string* _s = _internal_mutable_encode_output_project_kernel_kv();
  // @@protoc_insertion_point(field_mutable:QuantEmbeddingLayer.encode_output_project_kernel_kv)
  return _s;
}
inline const std::string& QuantEmbeddingLayer::_internal_encode_output_project_kernel_kv() const {
  return _impl_.encode_output_project_kernel_kv_.Get();
}
inline void QuantEmbeddingLayer::_internal_set_encode_output_project_kernel_kv(const std::string& value) {
  
  _impl_.encode_output_project_kernel_kv_.Set(value, GetArenaForAllocation());
}
inline std::string* QuantEmbeddingLayer::_internal_mutable_encode_output_project_kernel_kv() {
  
  return _impl_.encode_output_project_kernel_kv_.Mutable(GetArenaForAllocation());
}
inline std::string* QuantEmbeddingLayer::release_encode_output_project_kernel_kv() {
  // @@protoc_insertion_point(field_release:QuantEmbeddingLayer.encode_output_project_kernel_kv)
  return _impl_.encode_output_project_kernel_kv_.Release();
}
inline void QuantEmbeddingLayer::set_allocated_encode_output_project_kernel_kv(std::string* encode_output_project_kernel_kv) {
  if (encode_output_project_kernel_kv != nullptr) {
    
  } else {
    
  }
  _impl_.encode_output_project_kernel_kv_.SetAllocated(encode_output_project_kernel_kv, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encode_output_project_kernel_kv_.IsDefault()) {
    _impl_.encode_output_project_kernel_kv_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QuantEmbeddingLayer.encode_output_project_kernel_kv)
}

// repeated float encode_output_project_bias_kv = 6;
inline int QuantEmbeddingLayer::_internal_encode_output_project_bias_kv_size() const {
  return _impl_.encode_output_project_bias_kv_.size();
}
inline int QuantEmbeddingLayer::encode_output_project_bias_kv_size() const {
  return _internal_encode_output_project_bias_kv_size();
}
inline void QuantEmbeddingLayer::clear_encode_output_project_bias_kv() {
  _impl_.encode_output_project_bias_kv_.Clear();
}
inline float QuantEmbeddingLayer::_internal_encode_output_project_bias_kv(int index) const {
  return _impl_.encode_output_project_bias_kv_.Get(index);
}
inline float QuantEmbeddingLayer::encode_output_project_bias_kv(int index) const {
  // @@protoc_insertion_point(field_get:QuantEmbeddingLayer.encode_output_project_bias_kv)
  return _internal_encode_output_project_bias_kv(index);
}
inline void QuantEmbeddingLayer::set_encode_output_project_bias_kv(int index, float value) {
  _impl_.encode_output_project_bias_kv_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantEmbeddingLayer.encode_output_project_bias_kv)
}
inline void QuantEmbeddingLayer::_internal_add_encode_output_project_bias_kv(float value) {
  _impl_.encode_output_project_bias_kv_.Add(value);
}
inline void QuantEmbeddingLayer::add_encode_output_project_bias_kv(float value) {
  _internal_add_encode_output_project_bias_kv(value);
  // @@protoc_insertion_point(field_add:QuantEmbeddingLayer.encode_output_project_bias_kv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEmbeddingLayer::_internal_encode_output_project_bias_kv() const {
  return _impl_.encode_output_project_bias_kv_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEmbeddingLayer::encode_output_project_bias_kv() const {
  // @@protoc_insertion_point(field_list:QuantEmbeddingLayer.encode_output_project_bias_kv)
  return _internal_encode_output_project_bias_kv();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEmbeddingLayer::_internal_mutable_encode_output_project_bias_kv() {
  return &_impl_.encode_output_project_bias_kv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEmbeddingLayer::mutable_encode_output_project_bias_kv() {
  // @@protoc_insertion_point(field_mutable_list:QuantEmbeddingLayer.encode_output_project_bias_kv)
  return _internal_mutable_encode_output_project_bias_kv();
}

// repeated float shared_bias = 7;
inline int QuantEmbeddingLayer::_internal_shared_bias_size() const {
  return _impl_.shared_bias_.size();
}
inline int QuantEmbeddingLayer::shared_bias_size() const {
  return _internal_shared_bias_size();
}
inline void QuantEmbeddingLayer::clear_shared_bias() {
  _impl_.shared_bias_.Clear();
}
inline float QuantEmbeddingLayer::_internal_shared_bias(int index) const {
  return _impl_.shared_bias_.Get(index);
}
inline float QuantEmbeddingLayer::shared_bias(int index) const {
  // @@protoc_insertion_point(field_get:QuantEmbeddingLayer.shared_bias)
  return _internal_shared_bias(index);
}
inline void QuantEmbeddingLayer::set_shared_bias(int index, float value) {
  _impl_.shared_bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantEmbeddingLayer.shared_bias)
}
inline void QuantEmbeddingLayer::_internal_add_shared_bias(float value) {
  _impl_.shared_bias_.Add(value);
}
inline void QuantEmbeddingLayer::add_shared_bias(float value) {
  _internal_add_shared_bias(value);
  // @@protoc_insertion_point(field_add:QuantEmbeddingLayer.shared_bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEmbeddingLayer::_internal_shared_bias() const {
  return _impl_.shared_bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEmbeddingLayer::shared_bias() const {
  // @@protoc_insertion_point(field_list:QuantEmbeddingLayer.shared_bias)
  return _internal_shared_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEmbeddingLayer::_internal_mutable_shared_bias() {
  return &_impl_.shared_bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEmbeddingLayer::mutable_shared_bias() {
  // @@protoc_insertion_point(field_mutable_list:QuantEmbeddingLayer.shared_bias)
  return _internal_mutable_shared_bias();
}

// repeated float lang_emb = 8;
inline int QuantEmbeddingLayer::_internal_lang_emb_size() const {
  return _impl_.lang_emb_.size();
}
inline int QuantEmbeddingLayer::lang_emb_size() const {
  return _internal_lang_emb_size();
}
inline void QuantEmbeddingLayer::clear_lang_emb() {
  _impl_.lang_emb_.Clear();
}
inline float QuantEmbeddingLayer::_internal_lang_emb(int index) const {
  return _impl_.lang_emb_.Get(index);
}
inline float QuantEmbeddingLayer::lang_emb(int index) const {
  // @@protoc_insertion_point(field_get:QuantEmbeddingLayer.lang_emb)
  return _internal_lang_emb(index);
}
inline void QuantEmbeddingLayer::set_lang_emb(int index, float value) {
  _impl_.lang_emb_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantEmbeddingLayer.lang_emb)
}
inline void QuantEmbeddingLayer::_internal_add_lang_emb(float value) {
  _impl_.lang_emb_.Add(value);
}
inline void QuantEmbeddingLayer::add_lang_emb(float value) {
  _internal_add_lang_emb(value);
  // @@protoc_insertion_point(field_add:QuantEmbeddingLayer.lang_emb)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEmbeddingLayer::_internal_lang_emb() const {
  return _impl_.lang_emb_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEmbeddingLayer::lang_emb() const {
  // @@protoc_insertion_point(field_list:QuantEmbeddingLayer.lang_emb)
  return _internal_lang_emb();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEmbeddingLayer::_internal_mutable_lang_emb() {
  return &_impl_.lang_emb_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEmbeddingLayer::mutable_lang_emb() {
  // @@protoc_insertion_point(field_mutable_list:QuantEmbeddingLayer.lang_emb)
  return _internal_mutable_lang_emb();
}

// float emb_clip_max = 9;
inline void QuantEmbeddingLayer::clear_emb_clip_max() {
  _impl_.emb_clip_max_ = 0;
}
inline float QuantEmbeddingLayer::_internal_emb_clip_max() const {
  return _impl_.emb_clip_max_;
}
inline float QuantEmbeddingLayer::emb_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantEmbeddingLayer.emb_clip_max)
  return _internal_emb_clip_max();
}
inline void QuantEmbeddingLayer::_internal_set_emb_clip_max(float value) {
  
  _impl_.emb_clip_max_ = value;
}
inline void QuantEmbeddingLayer::set_emb_clip_max(float value) {
  _internal_set_emb_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantEmbeddingLayer.emb_clip_max)
}

// repeated float encode_output_project_kernel_kv_clip_max = 10;
inline int QuantEmbeddingLayer::_internal_encode_output_project_kernel_kv_clip_max_size() const {
  return _impl_.encode_output_project_kernel_kv_clip_max_.size();
}
inline int QuantEmbeddingLayer::encode_output_project_kernel_kv_clip_max_size() const {
  return _internal_encode_output_project_kernel_kv_clip_max_size();
}
inline void QuantEmbeddingLayer::clear_encode_output_project_kernel_kv_clip_max() {
  _impl_.encode_output_project_kernel_kv_clip_max_.Clear();
}
inline float QuantEmbeddingLayer::_internal_encode_output_project_kernel_kv_clip_max(int index) const {
  return _impl_.encode_output_project_kernel_kv_clip_max_.Get(index);
}
inline float QuantEmbeddingLayer::encode_output_project_kernel_kv_clip_max(int index) const {
  // @@protoc_insertion_point(field_get:QuantEmbeddingLayer.encode_output_project_kernel_kv_clip_max)
  return _internal_encode_output_project_kernel_kv_clip_max(index);
}
inline void QuantEmbeddingLayer::set_encode_output_project_kernel_kv_clip_max(int index, float value) {
  _impl_.encode_output_project_kernel_kv_clip_max_.Set(index, value);
  // @@protoc_insertion_point(field_set:QuantEmbeddingLayer.encode_output_project_kernel_kv_clip_max)
}
inline void QuantEmbeddingLayer::_internal_add_encode_output_project_kernel_kv_clip_max(float value) {
  _impl_.encode_output_project_kernel_kv_clip_max_.Add(value);
}
inline void QuantEmbeddingLayer::add_encode_output_project_kernel_kv_clip_max(float value) {
  _internal_add_encode_output_project_kernel_kv_clip_max(value);
  // @@protoc_insertion_point(field_add:QuantEmbeddingLayer.encode_output_project_kernel_kv_clip_max)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEmbeddingLayer::_internal_encode_output_project_kernel_kv_clip_max() const {
  return _impl_.encode_output_project_kernel_kv_clip_max_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QuantEmbeddingLayer::encode_output_project_kernel_kv_clip_max() const {
  // @@protoc_insertion_point(field_list:QuantEmbeddingLayer.encode_output_project_kernel_kv_clip_max)
  return _internal_encode_output_project_kernel_kv_clip_max();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEmbeddingLayer::_internal_mutable_encode_output_project_kernel_kv_clip_max() {
  return &_impl_.encode_output_project_kernel_kv_clip_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QuantEmbeddingLayer::mutable_encode_output_project_kernel_kv_clip_max() {
  // @@protoc_insertion_point(field_mutable_list:QuantEmbeddingLayer.encode_output_project_kernel_kv_clip_max)
  return _internal_mutable_encode_output_project_kernel_kv_clip_max();
}

// float output_ln_clip_max = 11;
inline void QuantEmbeddingLayer::clear_output_ln_clip_max() {
  _impl_.output_ln_clip_max_ = 0;
}
inline float QuantEmbeddingLayer::_internal_output_ln_clip_max() const {
  return _impl_.output_ln_clip_max_;
}
inline float QuantEmbeddingLayer::output_ln_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantEmbeddingLayer.output_ln_clip_max)
  return _internal_output_ln_clip_max();
}
inline void QuantEmbeddingLayer::_internal_set_output_ln_clip_max(float value) {
  
  _impl_.output_ln_clip_max_ = value;
}
inline void QuantEmbeddingLayer::set_output_ln_clip_max(float value) {
  _internal_set_output_ln_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantEmbeddingLayer.output_ln_clip_max)
}

// float logits_clip_max = 12;
inline void QuantEmbeddingLayer::clear_logits_clip_max() {
  _impl_.logits_clip_max_ = 0;
}
inline float QuantEmbeddingLayer::_internal_logits_clip_max() const {
  return _impl_.logits_clip_max_;
}
inline float QuantEmbeddingLayer::logits_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantEmbeddingLayer.logits_clip_max)
  return _internal_logits_clip_max();
}
inline void QuantEmbeddingLayer::_internal_set_logits_clip_max(float value) {
  
  _impl_.logits_clip_max_ = value;
}
inline void QuantEmbeddingLayer::set_logits_clip_max(float value) {
  _internal_set_logits_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantEmbeddingLayer.logits_clip_max)
}

// float encoder_output_clip_max = 13;
inline void QuantEmbeddingLayer::clear_encoder_output_clip_max() {
  _impl_.encoder_output_clip_max_ = 0;
}
inline float QuantEmbeddingLayer::_internal_encoder_output_clip_max() const {
  return _impl_.encoder_output_clip_max_;
}
inline float QuantEmbeddingLayer::encoder_output_clip_max() const {
  // @@protoc_insertion_point(field_get:QuantEmbeddingLayer.encoder_output_clip_max)
  return _internal_encoder_output_clip_max();
}
inline void QuantEmbeddingLayer::_internal_set_encoder_output_clip_max(float value) {
  
  _impl_.encoder_output_clip_max_ = value;
}
inline void QuantEmbeddingLayer::set_encoder_output_clip_max(float value) {
  _internal_set_encoder_output_clip_max(value);
  // @@protoc_insertion_point(field_set:QuantEmbeddingLayer.encoder_output_clip_max)
}

// -------------------------------------------------------------------

// QuantModelConf

// int32 head_num = 1;
inline void QuantModelConf::clear_head_num() {
  _impl_.head_num_ = 0;
}
inline int32_t QuantModelConf::_internal_head_num() const {
  return _impl_.head_num_;
}
inline int32_t QuantModelConf::head_num() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.head_num)
  return _internal_head_num();
}
inline void QuantModelConf::_internal_set_head_num(int32_t value) {
  
  _impl_.head_num_ = value;
}
inline void QuantModelConf::set_head_num(int32_t value) {
  _internal_set_head_num(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.head_num)
}

// int32 beam_size = 2;
inline void QuantModelConf::clear_beam_size() {
  _impl_.beam_size_ = 0;
}
inline int32_t QuantModelConf::_internal_beam_size() const {
  return _impl_.beam_size_;
}
inline int32_t QuantModelConf::beam_size() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.beam_size)
  return _internal_beam_size();
}
inline void QuantModelConf::_internal_set_beam_size(int32_t value) {
  
  _impl_.beam_size_ = value;
}
inline void QuantModelConf::set_beam_size(int32_t value) {
  _internal_set_beam_size(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.beam_size)
}

// int32 extra_decode_length = 3;
inline void QuantModelConf::clear_extra_decode_length() {
  _impl_.extra_decode_length_ = 0;
}
inline int32_t QuantModelConf::_internal_extra_decode_length() const {
  return _impl_.extra_decode_length_;
}
inline int32_t QuantModelConf::extra_decode_length() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.extra_decode_length)
  return _internal_extra_decode_length();
}
inline void QuantModelConf::_internal_set_extra_decode_length(int32_t value) {
  
  _impl_.extra_decode_length_ = value;
}
inline void QuantModelConf::set_extra_decode_length(int32_t value) {
  _internal_set_extra_decode_length(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.extra_decode_length)
}

// float length_penalty = 4;
inline void QuantModelConf::clear_length_penalty() {
  _impl_.length_penalty_ = 0;
}
inline float QuantModelConf::_internal_length_penalty() const {
  return _impl_.length_penalty_;
}
inline float QuantModelConf::length_penalty() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.length_penalty)
  return _internal_length_penalty();
}
inline void QuantModelConf::_internal_set_length_penalty(float value) {
  
  _impl_.length_penalty_ = value;
}
inline void QuantModelConf::set_length_penalty(float value) {
  _internal_set_length_penalty(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.length_penalty)
}

// int32 src_padding_id = 5;
inline void QuantModelConf::clear_src_padding_id() {
  _impl_.src_padding_id_ = 0;
}
inline int32_t QuantModelConf::_internal_src_padding_id() const {
  return _impl_.src_padding_id_;
}
inline int32_t QuantModelConf::src_padding_id() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.src_padding_id)
  return _internal_src_padding_id();
}
inline void QuantModelConf::_internal_set_src_padding_id(int32_t value) {
  
  _impl_.src_padding_id_ = value;
}
inline void QuantModelConf::set_src_padding_id(int32_t value) {
  _internal_set_src_padding_id(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.src_padding_id)
}

// int32 trg_start_id = 6;
inline void QuantModelConf::clear_trg_start_id() {
  _impl_.trg_start_id_ = 0;
}
inline int32_t QuantModelConf::_internal_trg_start_id() const {
  return _impl_.trg_start_id_;
}
inline int32_t QuantModelConf::trg_start_id() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.trg_start_id)
  return _internal_trg_start_id();
}
inline void QuantModelConf::_internal_set_trg_start_id(int32_t value) {
  
  _impl_.trg_start_id_ = value;
}
inline void QuantModelConf::set_trg_start_id(int32_t value) {
  _internal_set_trg_start_id(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.trg_start_id)
}

// float diverse_lambda = 7;
inline void QuantModelConf::clear_diverse_lambda() {
  _impl_.diverse_lambda_ = 0;
}
inline float QuantModelConf::_internal_diverse_lambda() const {
  return _impl_.diverse_lambda_;
}
inline float QuantModelConf::diverse_lambda() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.diverse_lambda)
  return _internal_diverse_lambda();
}
inline void QuantModelConf::_internal_set_diverse_lambda(float value) {
  
  _impl_.diverse_lambda_ = value;
}
inline void QuantModelConf::set_diverse_lambda(float value) {
  _internal_set_diverse_lambda(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.diverse_lambda)
}

// string sampling_method = 8;
inline void QuantModelConf::clear_sampling_method() {
  _impl_.sampling_method_.ClearToEmpty();
}
inline const std::string& QuantModelConf::sampling_method() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.sampling_method)
  return _internal_sampling_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuantModelConf::set_sampling_method(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sampling_method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QuantModelConf.sampling_method)
}
inline std::string* QuantModelConf::mutable_sampling_method() {
  std::string* _s = _internal_mutable_sampling_method();
  // @@protoc_insertion_point(field_mutable:QuantModelConf.sampling_method)
  return _s;
}
inline const std::string& QuantModelConf::_internal_sampling_method() const {
  return _impl_.sampling_method_.Get();
}
inline void QuantModelConf::_internal_set_sampling_method(const std::string& value) {
  
  _impl_.sampling_method_.Set(value, GetArenaForAllocation());
}
inline std::string* QuantModelConf::_internal_mutable_sampling_method() {
  
  return _impl_.sampling_method_.Mutable(GetArenaForAllocation());
}
inline std::string* QuantModelConf::release_sampling_method() {
  // @@protoc_insertion_point(field_release:QuantModelConf.sampling_method)
  return _impl_.sampling_method_.Release();
}
inline void QuantModelConf::set_allocated_sampling_method(std::string* sampling_method) {
  if (sampling_method != nullptr) {
    
  } else {
    
  }
  _impl_.sampling_method_.SetAllocated(sampling_method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sampling_method_.IsDefault()) {
    _impl_.sampling_method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QuantModelConf.sampling_method)
}

// float topp = 9;
inline void QuantModelConf::clear_topp() {
  _impl_.topp_ = 0;
}
inline float QuantModelConf::_internal_topp() const {
  return _impl_.topp_;
}
inline float QuantModelConf::topp() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.topp)
  return _internal_topp();
}
inline void QuantModelConf::_internal_set_topp(float value) {
  
  _impl_.topp_ = value;
}
inline void QuantModelConf::set_topp(float value) {
  _internal_set_topp(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.topp)
}

// int32 topk = 10;
inline void QuantModelConf::clear_topk() {
  _impl_.topk_ = 0;
}
inline int32_t QuantModelConf::_internal_topk() const {
  return _impl_.topk_;
}
inline int32_t QuantModelConf::topk() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.topk)
  return _internal_topk();
}
inline void QuantModelConf::_internal_set_topk(int32_t value) {
  
  _impl_.topk_ = value;
}
inline void QuantModelConf::set_topk(int32_t value) {
  _internal_set_topk(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.topk)
}

// int32 trg_end_id = 11;
inline void QuantModelConf::clear_trg_end_id() {
  _impl_.trg_end_id_ = 0;
}
inline int32_t QuantModelConf::_internal_trg_end_id() const {
  return _impl_.trg_end_id_;
}
inline int32_t QuantModelConf::trg_end_id() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.trg_end_id)
  return _internal_trg_end_id();
}
inline void QuantModelConf::_internal_set_trg_end_id(int32_t value) {
  
  _impl_.trg_end_id_ = value;
}
inline void QuantModelConf::set_trg_end_id(int32_t value) {
  _internal_set_trg_end_id(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.trg_end_id)
}

// bool is_post_ln = 12;
inline void QuantModelConf::clear_is_post_ln() {
  _impl_.is_post_ln_ = false;
}
inline bool QuantModelConf::_internal_is_post_ln() const {
  return _impl_.is_post_ln_;
}
inline bool QuantModelConf::is_post_ln() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.is_post_ln)
  return _internal_is_post_ln();
}
inline void QuantModelConf::_internal_set_is_post_ln(bool value) {
  
  _impl_.is_post_ln_ = value;
}
inline void QuantModelConf::set_is_post_ln(bool value) {
  _internal_set_is_post_ln(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.is_post_ln)
}

// bool no_scale_embedding = 13;
inline void QuantModelConf::clear_no_scale_embedding() {
  _impl_.no_scale_embedding_ = false;
}
inline bool QuantModelConf::_internal_no_scale_embedding() const {
  return _impl_.no_scale_embedding_;
}
inline bool QuantModelConf::no_scale_embedding() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.no_scale_embedding)
  return _internal_no_scale_embedding();
}
inline void QuantModelConf::_internal_set_no_scale_embedding(bool value) {
  
  _impl_.no_scale_embedding_ = value;
}
inline void QuantModelConf::set_no_scale_embedding(bool value) {
  _internal_set_no_scale_embedding(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.no_scale_embedding)
}

// bool use_gelu = 14;
inline void QuantModelConf::clear_use_gelu() {
  _impl_.use_gelu_ = false;
}
inline bool QuantModelConf::_internal_use_gelu() const {
  return _impl_.use_gelu_;
}
inline bool QuantModelConf::use_gelu() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.use_gelu)
  return _internal_use_gelu();
}
inline void QuantModelConf::_internal_set_use_gelu(bool value) {
  
  _impl_.use_gelu_ = value;
}
inline void QuantModelConf::set_use_gelu(bool value) {
  _internal_set_use_gelu(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.use_gelu)
}

// int32 multilg_type = 15;
inline void QuantModelConf::clear_multilg_type() {
  _impl_.multilg_type_ = 0;
}
inline int32_t QuantModelConf::_internal_multilg_type() const {
  return _impl_.multilg_type_;
}
inline int32_t QuantModelConf::multilg_type() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.multilg_type)
  return _internal_multilg_type();
}
inline void QuantModelConf::_internal_set_multilg_type(int32_t value) {
  
  _impl_.multilg_type_ = value;
}
inline void QuantModelConf::set_multilg_type(int32_t value) {
  _internal_set_multilg_type(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.multilg_type)
}

// int32 n_encoder_stack = 16;
inline void QuantModelConf::clear_n_encoder_stack() {
  _impl_.n_encoder_stack_ = 0;
}
inline int32_t QuantModelConf::_internal_n_encoder_stack() const {
  return _impl_.n_encoder_stack_;
}
inline int32_t QuantModelConf::n_encoder_stack() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.n_encoder_stack)
  return _internal_n_encoder_stack();
}
inline void QuantModelConf::_internal_set_n_encoder_stack(int32_t value) {
  
  _impl_.n_encoder_stack_ = value;
}
inline void QuantModelConf::set_n_encoder_stack(int32_t value) {
  _internal_set_n_encoder_stack(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.n_encoder_stack)
}

// int32 n_decoder_stack = 17;
inline void QuantModelConf::clear_n_decoder_stack() {
  _impl_.n_decoder_stack_ = 0;
}
inline int32_t QuantModelConf::_internal_n_decoder_stack() const {
  return _impl_.n_decoder_stack_;
}
inline int32_t QuantModelConf::n_decoder_stack() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.n_decoder_stack)
  return _internal_n_decoder_stack();
}
inline void QuantModelConf::_internal_set_n_decoder_stack(int32_t value) {
  
  _impl_.n_decoder_stack_ = value;
}
inline void QuantModelConf::set_n_decoder_stack(int32_t value) {
  _internal_set_n_decoder_stack(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.n_decoder_stack)
}

// float greedy_len_a = 18;
inline void QuantModelConf::clear_greedy_len_a() {
  _impl_.greedy_len_a_ = 0;
}
inline float QuantModelConf::_internal_greedy_len_a() const {
  return _impl_.greedy_len_a_;
}
inline float QuantModelConf::greedy_len_a() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.greedy_len_a)
  return _internal_greedy_len_a();
}
inline void QuantModelConf::_internal_set_greedy_len_a(float value) {
  
  _impl_.greedy_len_a_ = value;
}
inline void QuantModelConf::set_greedy_len_a(float value) {
  _internal_set_greedy_len_a(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.greedy_len_a)
}

// int32 greedy_len_b = 19;
inline void QuantModelConf::clear_greedy_len_b() {
  _impl_.greedy_len_b_ = 0;
}
inline int32_t QuantModelConf::_internal_greedy_len_b() const {
  return _impl_.greedy_len_b_;
}
inline int32_t QuantModelConf::greedy_len_b() const {
  // @@protoc_insertion_point(field_get:QuantModelConf.greedy_len_b)
  return _internal_greedy_len_b();
}
inline void QuantModelConf::_internal_set_greedy_len_b(int32_t value) {
  
  _impl_.greedy_len_b_ = value;
}
inline void QuantModelConf::set_greedy_len_b(int32_t value) {
  _internal_set_greedy_len_b(value);
  // @@protoc_insertion_point(field_set:QuantModelConf.greedy_len_b)
}

// -------------------------------------------------------------------

// QuantTransformer

// .QuantEmbeddingLayer src_embedding = 1;
inline bool QuantTransformer::_internal_has_src_embedding() const {
  return this != internal_default_instance() && _impl_.src_embedding_ != nullptr;
}
inline bool QuantTransformer::has_src_embedding() const {
  return _internal_has_src_embedding();
}
inline void QuantTransformer::clear_src_embedding() {
  if (GetArenaForAllocation() == nullptr && _impl_.src_embedding_ != nullptr) {
    delete _impl_.src_embedding_;
  }
  _impl_.src_embedding_ = nullptr;
}
inline const ::QuantEmbeddingLayer& QuantTransformer::_internal_src_embedding() const {
  const ::QuantEmbeddingLayer* p = _impl_.src_embedding_;
  return p != nullptr ? *p : reinterpret_cast<const ::QuantEmbeddingLayer&>(
      ::_QuantEmbeddingLayer_default_instance_);
}
inline const ::QuantEmbeddingLayer& QuantTransformer::src_embedding() const {
  // @@protoc_insertion_point(field_get:QuantTransformer.src_embedding)
  return _internal_src_embedding();
}
inline void QuantTransformer::unsafe_arena_set_allocated_src_embedding(
    ::QuantEmbeddingLayer* src_embedding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.src_embedding_);
  }
  _impl_.src_embedding_ = src_embedding;
  if (src_embedding) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QuantTransformer.src_embedding)
}
inline ::QuantEmbeddingLayer* QuantTransformer::release_src_embedding() {
  
  ::QuantEmbeddingLayer* temp = _impl_.src_embedding_;
  _impl_.src_embedding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::QuantEmbeddingLayer* QuantTransformer::unsafe_arena_release_src_embedding() {
  // @@protoc_insertion_point(field_release:QuantTransformer.src_embedding)
  
  ::QuantEmbeddingLayer* temp = _impl_.src_embedding_;
  _impl_.src_embedding_ = nullptr;
  return temp;
}
inline ::QuantEmbeddingLayer* QuantTransformer::_internal_mutable_src_embedding() {
  
  if (_impl_.src_embedding_ == nullptr) {
    auto* p = CreateMaybeMessage<::QuantEmbeddingLayer>(GetArenaForAllocation());
    _impl_.src_embedding_ = p;
  }
  return _impl_.src_embedding_;
}
inline ::QuantEmbeddingLayer* QuantTransformer::mutable_src_embedding() {
  ::QuantEmbeddingLayer* _msg = _internal_mutable_src_embedding();
  // @@protoc_insertion_point(field_mutable:QuantTransformer.src_embedding)
  return _msg;
}
inline void QuantTransformer::set_allocated_src_embedding(::QuantEmbeddingLayer* src_embedding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.src_embedding_;
  }
  if (src_embedding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(src_embedding);
    if (message_arena != submessage_arena) {
      src_embedding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_embedding, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.src_embedding_ = src_embedding;
  // @@protoc_insertion_point(field_set_allocated:QuantTransformer.src_embedding)
}

// repeated .QuantEncoderLayer encoder_stack = 2;
inline int QuantTransformer::_internal_encoder_stack_size() const {
  return _impl_.encoder_stack_.size();
}
inline int QuantTransformer::encoder_stack_size() const {
  return _internal_encoder_stack_size();
}
inline void QuantTransformer::clear_encoder_stack() {
  _impl_.encoder_stack_.Clear();
}
inline ::QuantEncoderLayer* QuantTransformer::mutable_encoder_stack(int index) {
  // @@protoc_insertion_point(field_mutable:QuantTransformer.encoder_stack)
  return _impl_.encoder_stack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QuantEncoderLayer >*
QuantTransformer::mutable_encoder_stack() {
  // @@protoc_insertion_point(field_mutable_list:QuantTransformer.encoder_stack)
  return &_impl_.encoder_stack_;
}
inline const ::QuantEncoderLayer& QuantTransformer::_internal_encoder_stack(int index) const {
  return _impl_.encoder_stack_.Get(index);
}
inline const ::QuantEncoderLayer& QuantTransformer::encoder_stack(int index) const {
  // @@protoc_insertion_point(field_get:QuantTransformer.encoder_stack)
  return _internal_encoder_stack(index);
}
inline ::QuantEncoderLayer* QuantTransformer::_internal_add_encoder_stack() {
  return _impl_.encoder_stack_.Add();
}
inline ::QuantEncoderLayer* QuantTransformer::add_encoder_stack() {
  ::QuantEncoderLayer* _add = _internal_add_encoder_stack();
  // @@protoc_insertion_point(field_add:QuantTransformer.encoder_stack)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QuantEncoderLayer >&
QuantTransformer::encoder_stack() const {
  // @@protoc_insertion_point(field_list:QuantTransformer.encoder_stack)
  return _impl_.encoder_stack_;
}

// .QuantEmbeddingLayer trg_embedding = 3;
inline bool QuantTransformer::_internal_has_trg_embedding() const {
  return this != internal_default_instance() && _impl_.trg_embedding_ != nullptr;
}
inline bool QuantTransformer::has_trg_embedding() const {
  return _internal_has_trg_embedding();
}
inline void QuantTransformer::clear_trg_embedding() {
  if (GetArenaForAllocation() == nullptr && _impl_.trg_embedding_ != nullptr) {
    delete _impl_.trg_embedding_;
  }
  _impl_.trg_embedding_ = nullptr;
}
inline const ::QuantEmbeddingLayer& QuantTransformer::_internal_trg_embedding() const {
  const ::QuantEmbeddingLayer* p = _impl_.trg_embedding_;
  return p != nullptr ? *p : reinterpret_cast<const ::QuantEmbeddingLayer&>(
      ::_QuantEmbeddingLayer_default_instance_);
}
inline const ::QuantEmbeddingLayer& QuantTransformer::trg_embedding() const {
  // @@protoc_insertion_point(field_get:QuantTransformer.trg_embedding)
  return _internal_trg_embedding();
}
inline void QuantTransformer::unsafe_arena_set_allocated_trg_embedding(
    ::QuantEmbeddingLayer* trg_embedding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trg_embedding_);
  }
  _impl_.trg_embedding_ = trg_embedding;
  if (trg_embedding) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QuantTransformer.trg_embedding)
}
inline ::QuantEmbeddingLayer* QuantTransformer::release_trg_embedding() {
  
  ::QuantEmbeddingLayer* temp = _impl_.trg_embedding_;
  _impl_.trg_embedding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::QuantEmbeddingLayer* QuantTransformer::unsafe_arena_release_trg_embedding() {
  // @@protoc_insertion_point(field_release:QuantTransformer.trg_embedding)
  
  ::QuantEmbeddingLayer* temp = _impl_.trg_embedding_;
  _impl_.trg_embedding_ = nullptr;
  return temp;
}
inline ::QuantEmbeddingLayer* QuantTransformer::_internal_mutable_trg_embedding() {
  
  if (_impl_.trg_embedding_ == nullptr) {
    auto* p = CreateMaybeMessage<::QuantEmbeddingLayer>(GetArenaForAllocation());
    _impl_.trg_embedding_ = p;
  }
  return _impl_.trg_embedding_;
}
inline ::QuantEmbeddingLayer* QuantTransformer::mutable_trg_embedding() {
  ::QuantEmbeddingLayer* _msg = _internal_mutable_trg_embedding();
  // @@protoc_insertion_point(field_mutable:QuantTransformer.trg_embedding)
  return _msg;
}
inline void QuantTransformer::set_allocated_trg_embedding(::QuantEmbeddingLayer* trg_embedding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trg_embedding_;
  }
  if (trg_embedding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trg_embedding);
    if (message_arena != submessage_arena) {
      trg_embedding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trg_embedding, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trg_embedding_ = trg_embedding;
  // @@protoc_insertion_point(field_set_allocated:QuantTransformer.trg_embedding)
}

// repeated .QuantDecoderLayer decoder_stack = 4;
inline int QuantTransformer::_internal_decoder_stack_size() const {
  return _impl_.decoder_stack_.size();
}
inline int QuantTransformer::decoder_stack_size() const {
  return _internal_decoder_stack_size();
}
inline void QuantTransformer::clear_decoder_stack() {
  _impl_.decoder_stack_.Clear();
}
inline ::QuantDecoderLayer* QuantTransformer::mutable_decoder_stack(int index) {
  // @@protoc_insertion_point(field_mutable:QuantTransformer.decoder_stack)
  return _impl_.decoder_stack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QuantDecoderLayer >*
QuantTransformer::mutable_decoder_stack() {
  // @@protoc_insertion_point(field_mutable_list:QuantTransformer.decoder_stack)
  return &_impl_.decoder_stack_;
}
inline const ::QuantDecoderLayer& QuantTransformer::_internal_decoder_stack(int index) const {
  return _impl_.decoder_stack_.Get(index);
}
inline const ::QuantDecoderLayer& QuantTransformer::decoder_stack(int index) const {
  // @@protoc_insertion_point(field_get:QuantTransformer.decoder_stack)
  return _internal_decoder_stack(index);
}
inline ::QuantDecoderLayer* QuantTransformer::_internal_add_decoder_stack() {
  return _impl_.decoder_stack_.Add();
}
inline ::QuantDecoderLayer* QuantTransformer::add_decoder_stack() {
  ::QuantDecoderLayer* _add = _internal_add_decoder_stack();
  // @@protoc_insertion_point(field_add:QuantTransformer.decoder_stack)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QuantDecoderLayer >&
QuantTransformer::decoder_stack() const {
  // @@protoc_insertion_point(field_list:QuantTransformer.decoder_stack)
  return _impl_.decoder_stack_;
}

// .QuantModelConf model_conf = 5;
inline bool QuantTransformer::_internal_has_model_conf() const {
  return this != internal_default_instance() && _impl_.model_conf_ != nullptr;
}
inline bool QuantTransformer::has_model_conf() const {
  return _internal_has_model_conf();
}
inline void QuantTransformer::clear_model_conf() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_conf_ != nullptr) {
    delete _impl_.model_conf_;
  }
  _impl_.model_conf_ = nullptr;
}
inline const ::QuantModelConf& QuantTransformer::_internal_model_conf() const {
  const ::QuantModelConf* p = _impl_.model_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::QuantModelConf&>(
      ::_QuantModelConf_default_instance_);
}
inline const ::QuantModelConf& QuantTransformer::model_conf() const {
  // @@protoc_insertion_point(field_get:QuantTransformer.model_conf)
  return _internal_model_conf();
}
inline void QuantTransformer::unsafe_arena_set_allocated_model_conf(
    ::QuantModelConf* model_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.model_conf_);
  }
  _impl_.model_conf_ = model_conf;
  if (model_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QuantTransformer.model_conf)
}
inline ::QuantModelConf* QuantTransformer::release_model_conf() {
  
  ::QuantModelConf* temp = _impl_.model_conf_;
  _impl_.model_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::QuantModelConf* QuantTransformer::unsafe_arena_release_model_conf() {
  // @@protoc_insertion_point(field_release:QuantTransformer.model_conf)
  
  ::QuantModelConf* temp = _impl_.model_conf_;
  _impl_.model_conf_ = nullptr;
  return temp;
}
inline ::QuantModelConf* QuantTransformer::_internal_mutable_model_conf() {
  
  if (_impl_.model_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::QuantModelConf>(GetArenaForAllocation());
    _impl_.model_conf_ = p;
  }
  return _impl_.model_conf_;
}
inline ::QuantModelConf* QuantTransformer::mutable_model_conf() {
  ::QuantModelConf* _msg = _internal_mutable_model_conf();
  // @@protoc_insertion_point(field_mutable:QuantTransformer.model_conf)
  return _msg;
}
inline void QuantTransformer::set_allocated_model_conf(::QuantModelConf* model_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.model_conf_;
  }
  if (model_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(model_conf);
    if (message_arena != submessage_arena) {
      model_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_conf, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.model_conf_ = model_conf;
  // @@protoc_insertion_point(field_set_allocated:QuantTransformer.model_conf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_quant_5ftransformer_2eproto
